{"ast":null,"code":"var _jsxFileName = \"/Users/davidmash/Documents/website/src/Components/AudioVisualizer.js\";\nimport React, { useRef, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction AudioVisualizer(props) {\n  /*\n  const [audioCtx, setAudioCtx] = useState(null);\n  const [audioElement, setAudioElement] = useState(null);\n  const [source, setSource] = useState(null);\n  const [analyser, setAnalyser] = useState(null);\n  const [bufferLength, setBufferLength] = useState(null);\n  const [dataArray, setDataArray] = useState(null);\n  const [loaded, setLoaded] = useState(false);\n  const [ultimate, setUltimatePeak] = useState(1);\n  const fileInputRef = useRef(null);\n  const frequencyRef = useRef(null);\n  const backgroundRef = useRef(null);\n  const scrubBarRef = useRef(null);\n  const [play, setPlay] = useState(false);\n   // Initialize audio context and elements when the file input changes\n  function loadAudio() {\n      if (audioElement) {\n          audioElement.pause();\n          audioElement.currentTime = 0;\n      }\n      setAudioCtx(new (window.AudioContext || window.webkitAudioContext)());\n      setAudioElement(new Audio(), () => {\n          audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n          audioElement.src = URL.createObjectURL(fileInputRef.current.files[0]);\n          audioElement.addEventListener(\"loadeddata\", () => {\n              setLoaded(true);\n              scrubBarRef.value = 0;\n          });\n          audioElement.addEventListener(\"ended\", () => {\n              setPlay(false);\n          });\n          setSource(audioCtx.createMediaElementSource(audioElement), () => {\n              setAnalyser(audioCtx.createAnalyser(), () => {\n                  source.connect(analyser);\n                  analyser.connect(audioCtx.destination);\n                  setBufferLength(analyser.frequencyBinCount);\n                  setDataArray(new Uint8Array(bufferLength));\n                  setUltimatePeak(1);\n                  drawVisualization();\n              });\n          });\n      });\n  }\n   function updateScrubBar(){\n      if(audioElement) {\n          let currentTime = audioElement.currentTime;\n          let duration = audioElement.duration;\n          let scrubBarValue = (currentTime/duration)*100;\n          scrubBarRef.value = scrubBarValue;\n      }\n  }\n   function updatePlayback() {\n      if(audioElement) {\n          let scrubBarValue = scrubBarRef.value;\n          let currentTime = (scrubBarValue / 100) * audioElement.duration;\n          audioElement.currentTime = currentTime;\n      }\n  }\n   useEffect(() => {\n      //update sizes\n      backgroundRef.current.width = window.innerWidth;\n      backgroundRef.current.height = window.innerHeight;\n      frequencyRef.current.width = window.innerWidth;\n      frequencyRef.current.height = window.innerHeight;\n       window.addEventListener(\"resize\", () => {\n          backgroundRef.current.width = window.innerWidth;\n          backgroundRef.current.height = window.innerHeight;\n          frequencyRef.current.width = window.innerWidth;\n          frequencyRef.current.height = window.innerHeight;\n      });\n  }, []);\n   function drawVisualization() {\n      requestAnimationFrame(drawVisualization);\n      analyser.getByteFrequencyData(dataArray);\n       frequencyRef.current.fillStyle = \"rgba(0, 0, 0, 0.1)\";\n      frequencyRef.current.fillRect(0, 0, frequencyRef.current.width, frequencyRef.current.height);\n       let barWidth = (frequencyRef.current.width / bufferLength) * 2.5;\n      let barHeight;\n      let x = 0;\n       for (let i = 0; i < bufferLength; i++) {\n          barHeight = dataArray[i];\n          let r = barHeight + (25 * (i/bufferLength));\n          let g = 250 * (i/bufferLength);\n          let b = 50;\n          frequencyRef.current.fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n          frequencyRef.current.fillRect(x, frequencyRef.current.height - barHeight / 2, barWidth, barHeight / 2);\n          x += barWidth + 1;\n      }\n  }\n   function stopAudio() {\n      if (audioElement) {\n      audioElement.pause();\n      audioElement.currentTime = 0;\n      setPlay(false);\n      }\n  }\n   function togglePlay() {\n      if (audioElement) {\n      if (audioElement.paused) {\n          audioElement.play();\n          setPlay(true);\n      } else {\n          audioElement.pause();\n          setPlay(false);\n      }\n      }\n  }*/\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: props.style,\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      ref: fileInputRef,\n      onChange: loadAudio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), loaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: togglePlay,\n        children: play ? 'Pause' : 'Play'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopAudio,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: scrubBarRef,\n        type: \"range\",\n        min: \"0\",\n        max: \"100\",\n        value: loaded ? 0 : 100,\n        id: \"scrub-bar\",\n        disabled: !loaded\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: frequencyRef,\n      id: \"frequency\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: backgroundRef,\n      id: \"background\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n}\n\n_c = AudioVisualizer;\nexport default AudioVisualizer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioVisualizer\");","map":{"version":3,"sources":["/Users/davidmash/Documents/website/src/Components/AudioVisualizer.js"],"names":["React","useRef","useState","useEffect","AudioVisualizer","props","style","fileInputRef","loadAudio","loaded","togglePlay","play","stopAudio","scrubBarRef","frequencyRef","backgroundRef"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;;;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgaI,sBACI;AAAK,IAAA,KAAK,EAAEA,KAAK,CAACC,KAAlB;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,GAAG,EAAEC,YAAxB;AAAsC,MAAA,QAAQ,EAAEC;AAAhD;AAAA;AAAA;AAAA;AAAA,YAHJ,EAIKC,MAAM,gBACP;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACI;AAAQ,QAAA,OAAO,EAAEC,UAAjB;AAAA,kBAA8BC,IAAI,GAAG,OAAH,GAAa;AAA/C;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,OAAO,EAAEC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAO,QAAA,GAAG,EAAEC,WAAZ;AAAyB,QAAA,IAAI,EAAC,OAA9B;AAAsC,QAAA,GAAG,EAAC,GAA1C;AAA8C,QAAA,GAAG,EAAC,KAAlD;AAAwD,QAAA,KAAK,EAAEJ,MAAM,GAAG,CAAH,GAAO,GAA5E;AAAiF,QAAA,EAAE,EAAC,WAApF;AAAgG,QAAA,QAAQ,EAAE,CAACA;AAA3G;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADO,gBAOP,qCAXJ,eAaI;AAAA;AAAA;AAAA;AAAA,YAbJ,eAcI;AAAQ,MAAA,GAAG,EAAEK,YAAb;AAA2B,MAAA,EAAE,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA,YAdJ,eAeI;AAAQ,MAAA,GAAG,EAAEC,aAAb;AAA4B,MAAA,EAAE,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,YAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH;;KA3IQX,e;AA6IT,eAAeA,eAAf","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\n\nfunction AudioVisualizer(props) {\n    /*\n    const [audioCtx, setAudioCtx] = useState(null);\n    const [audioElement, setAudioElement] = useState(null);\n    const [source, setSource] = useState(null);\n    const [analyser, setAnalyser] = useState(null);\n    const [bufferLength, setBufferLength] = useState(null);\n    const [dataArray, setDataArray] = useState(null);\n    const [loaded, setLoaded] = useState(false);\n    const [ultimate, setUltimatePeak] = useState(1);\n    const fileInputRef = useRef(null);\n    const frequencyRef = useRef(null);\n    const backgroundRef = useRef(null);\n    const scrubBarRef = useRef(null);\n    const [play, setPlay] = useState(false);\n\n    // Initialize audio context and elements when the file input changes\n    function loadAudio() {\n        if (audioElement) {\n            audioElement.pause();\n            audioElement.currentTime = 0;\n        }\n        setAudioCtx(new (window.AudioContext || window.webkitAudioContext)());\n        setAudioElement(new Audio(), () => {\n            audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n            audioElement.src = URL.createObjectURL(fileInputRef.current.files[0]);\n            audioElement.addEventListener(\"loadeddata\", () => {\n                setLoaded(true);\n                scrubBarRef.value = 0;\n            });\n            audioElement.addEventListener(\"ended\", () => {\n                setPlay(false);\n            });\n            setSource(audioCtx.createMediaElementSource(audioElement), () => {\n                setAnalyser(audioCtx.createAnalyser(), () => {\n                    source.connect(analyser);\n                    analyser.connect(audioCtx.destination);\n                    setBufferLength(analyser.frequencyBinCount);\n                    setDataArray(new Uint8Array(bufferLength));\n                    setUltimatePeak(1);\n                    drawVisualization();\n                });\n            });\n        });\n    }\n\n    function updateScrubBar(){\n        if(audioElement) {\n            let currentTime = audioElement.currentTime;\n            let duration = audioElement.duration;\n            let scrubBarValue = (currentTime/duration)*100;\n            scrubBarRef.value = scrubBarValue;\n        }\n    }\n\n    function updatePlayback() {\n        if(audioElement) {\n            let scrubBarValue = scrubBarRef.value;\n            let currentTime = (scrubBarValue / 100) * audioElement.duration;\n            audioElement.currentTime = currentTime;\n        }\n    }\n\n    useEffect(() => {\n        //update sizes\n        backgroundRef.current.width = window.innerWidth;\n        backgroundRef.current.height = window.innerHeight;\n        frequencyRef.current.width = window.innerWidth;\n        frequencyRef.current.height = window.innerHeight;\n\n        window.addEventListener(\"resize\", () => {\n            backgroundRef.current.width = window.innerWidth;\n            backgroundRef.current.height = window.innerHeight;\n            frequencyRef.current.width = window.innerWidth;\n            frequencyRef.current.height = window.innerHeight;\n        });\n    }, []);\n\n    function drawVisualization() {\n        requestAnimationFrame(drawVisualization);\n        analyser.getByteFrequencyData(dataArray);\n\n        frequencyRef.current.fillStyle = \"rgba(0, 0, 0, 0.1)\";\n        frequencyRef.current.fillRect(0, 0, frequencyRef.current.width, frequencyRef.current.height);\n\n        let barWidth = (frequencyRef.current.width / bufferLength) * 2.5;\n        let barHeight;\n        let x = 0;\n\n        for (let i = 0; i < bufferLength; i++) {\n            barHeight = dataArray[i];\n            let r = barHeight + (25 * (i/bufferLength));\n            let g = 250 * (i/bufferLength);\n            let b = 50;\n            frequencyRef.current.fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n            frequencyRef.current.fillRect(x, frequencyRef.current.height - barHeight / 2, barWidth, barHeight / 2);\n            x += barWidth + 1;\n        }\n    }\n\n    function stopAudio() {\n        if (audioElement) {\n        audioElement.pause();\n        audioElement.currentTime = 0;\n        setPlay(false);\n        }\n    }\n\n    function togglePlay() {\n        if (audioElement) {\n        if (audioElement.paused) {\n            audioElement.play();\n            setPlay(true);\n        } else {\n            audioElement.pause();\n            setPlay(false);\n        }\n        }\n    }*/\n\n    return (\n        <div style={props.style}>\n            <br />\n            <br />\n            <input type=\"file\" ref={fileInputRef} onChange={loadAudio} />\n            {loaded?\n            <div className=\"control-panel\">\n                <button onClick={togglePlay}>{play ? 'Pause' : 'Play'}</button>\n                <button onClick={stopAudio}>Stop</button>\n                <input ref={scrubBarRef} type=\"range\" min=\"0\" max=\"100\" value={loaded ? 0 : 100} id=\"scrub-bar\" disabled={!loaded} />\n            </div>\n            :\n            <></>\n            }\n            <br />\n            <canvas ref={frequencyRef} id=\"frequency\" />\n            <canvas ref={backgroundRef} id=\"background\" />\n        </div>\n    );\n}\n\nexport default AudioVisualizer;\n"]},"metadata":{},"sourceType":"module"}