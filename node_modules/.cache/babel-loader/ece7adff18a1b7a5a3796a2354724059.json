{"ast":null,"code":"var _jsxFileName = \"/Users/davidmash/Documents/website/src/Components/AudioVisualizer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction AudioVisualizer(props) {\n  _s();\n\n  const [audioElement, setAudioElement] = useState(null);\n  const [loaded, setLoaded] = useState(false);\n  const fileInputRef = useRef(null);\n  const frequencyRef = useRef(null);\n  const backgroundRef = useRef(null);\n  const scrubBarRef = useRef(null);\n  const [play, setPlay] = useState(false);\n  useEffect(() => {\n    if (audioElement) {\n      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      const source = audioCtx.createMediaElementSource(audioElement);\n      const analyser = audioCtx.createAnalyser();\n      source.connect(analyser);\n      analyser.connect(audioCtx.destination);\n      const bufferLength = analyser.frequencyBinCount;\n      let dataArray = new Uint8Array(bufferLength);\n\n      function updateScrubBar() {\n        if (audioElement && scrubBarRef.current) {\n          let currentTime = audioElement.currentTime;\n          let duration = audioElement.duration;\n          let scrubBarValue = currentTime / duration * 100;\n          scrubBarRef.current.value = scrubBarValue;\n        }\n      }\n\n      audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n      audioElement.src = URL.createObjectURL(fileInputRef.current.files[0]);\n      audioElement.addEventListener(\"loadeddata\", () => {\n        setLoaded(true);\n      });\n      audioElement.addEventListener(\"ended\", () => {\n        setPlay(false);\n      });\n      frequencyRef.current.willReadFrequently = true;\n      backgroundRef.current.willReadFrequently = true;\n      const frequencyCtx = frequencyRef.current.getContext(\"2d\");\n      const smudgeCtx = backgroundRef.current.getContext(\"2d\");\n      backgroundRef.current.width = window.innerWidth;\n      backgroundRef.current.height = window.innerHeight;\n      frequencyRef.current.width = window.innerWidth;\n      frequencyRef.current.height = window.innerHeight;\n      window.addEventListener(\"resize\", () => {\n        backgroundRef.current.width = window.innerWidth;\n        backgroundRef.current.height = window.innerHeight;\n        frequencyRef.current.width = window.innerWidth;\n        frequencyRef.current.height = window.innerHeight;\n      });\n      let ultimatePeak = 1;\n      let rotationAngle = 0;\n      let rotateSmudge = false;\n      let smudgeVelocity = 0; // Draw the frequency spectrum visualization\n\n      function drawVisualization() {\n        requestAnimationFrame(drawVisualization);\n        analyser.getByteFrequencyData(dataArray); // draw current frame to main canvas\n\n        frequencyCtx.clearRect(0, 0, frequencyCtx.canvas.width, frequencyCtx.canvas.height);\n        let avgAmplitude = 0;\n        let highFreqAvgAmplitude = 0;\n        let midFreqAvgAmplitude = 0;\n        let lowFreqAvgAmplitude = 0;\n        let lowFreqPeakAmplitude = 0;\n\n        if (dataArray && dataArray.length > 0) {\n          let gradient = frequencyCtx.createLinearGradient(0, 0, frequencyCtx.canvas.width, 0);\n          let highFrequencyColor = getHighFrequencyColor(dataArray);\n          gradient.addColorStop(0, highFrequencyColor);\n          gradient.addColorStop(0.5, getLowFrequencyColor(dataArray));\n          gradient.addColorStop(1, highFrequencyColor);\n          frequencyCtx.fillStyle = gradient;\n          let verticalCenter = frequencyCtx.canvas.height / 2;\n          let barWidth = frequencyCtx.canvas.width / dataArray.length;\n          let x = 0;\n\n          for (let i = dataArray.length - 1; i > 0; i--) {\n            drawVisualizationBar(i, barWidth, x, verticalCenter);\n            x += barWidth;\n          }\n\n          for (let i = 0; i < dataArray.length; i++) {\n            drawVisualizationBar(i, barWidth, x, verticalCenter);\n            x += barWidth;\n          }\n\n          avgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length);\n          highFreqAvgAmplitude = getAverageAmplitude(dataArray, 12 * dataArray.length / 16, dataArray.length);\n          midFreqAvgAmplitude = getAverageAmplitude(dataArray, dataArray.length / 16, 3 * dataArray.length / 16);\n          lowFreqAvgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length / 16);\n          lowFreqPeakAmplitude = getPeakAmplitude(dataArray, 0, dataArray.length / 16);\n          frequencyCtx.globalAlpha = Math.abs(0.2 - avgAmplitude / 100) + 0.1;\n        }\n\n        console.log(highFreqAvgAmplitude + \" \" + midFreqAvgAmplitude + \" \" + lowFreqAvgAmplitude + \" \" + avgAmplitude + \" \" + ultimatePeak); //smudge effect\n\n        rotateSmudge = rotateSmudge && !(lowFreqPeakAmplitude > ultimatePeak * 1.01) && midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 1.8 || midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 3.2;\n\n        if (rotateSmudge) {\n          rotationAngle = (rotationAngle + 1) % 360;\n          smudgeVelocity = lowFreqAvgAmplitude / 60 * (midFreqAvgAmplitude < highFreqAvgAmplitude) ? -1 : 1; // Save the current canvas state\n\n          smudgeCtx.save(); // Rotate the canvas\n\n          smudgeCtx.translate(smudgeCtx.canvas.width / 2, smudgeCtx.canvas.height / 2);\n          smudgeCtx.rotate(Math.PI / 180 * rotationAngle * smudgeVelocity);\n          smudgeCtx.translate(-smudgeCtx.canvas.width / 2, -smudgeCtx.canvas.height / 2); // Draw the smudged image on the canvas\n\n          smudgeCtx.globalAlpha = Math.abs(0.5 - avgAmplitude / 100) / 10;\n          smudgeCtx.drawImage(smudgeCtx.canvas, 0, 0); // Restore the canvas state\n\n          smudgeCtx.restore();\n        } else {\n          rotationAngle = 0;\n          var imageDataTop = smudgeCtx.getImageData(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height / 2);\n          var imageDataBottom = smudgeCtx.getImageData(0, smudgeCtx.canvas.height / 2, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n          smudgeCtx.clearRect(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n          smudgeCtx.globalAlpha = 0.5 - avgAmplitude / 100;\n          smudgeVelocity = avgAmplitude < 10 ? avgAmplitude * 2 : (lowFreqPeakAmplitude >= ultimatePeak && lowFreqAvgAmplitude * 0.6 > midFreqAvgAmplitude + highFreqAvgAmplitude ? -1 : 1) * avgAmplitude / 4;\n          smudgeCtx.putImageData(imageDataTop, 0, -smudgeVelocity);\n          smudgeCtx.putImageData(imageDataBottom, 0, smudgeCtx.canvas.height / 2 + smudgeVelocity);\n        }\n\n        smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n      }\n\n      function getAverageAmplitude(data, startIndex, endIndex) {\n        startIndex = Math.trunc(startIndex);\n        endIndex = Math.min(Math.trunc(endIndex), data.length);\n        let sum = 0;\n\n        for (let i = startIndex; i < endIndex; i++) {\n          sum += data[i];\n        }\n\n        return sum / (endIndex - startIndex - 1);\n      }\n\n      function getPeakAmplitude(data, startIndex, endIndex) {\n        startIndex = Math.trunc(startIndex);\n        endIndex = Math.min(Math.trunc(endIndex), data.length);\n        let peak = 0;\n\n        for (let i = startIndex; i < endIndex; i++) {\n          peak = Math.max(peak, data[i]);\n        }\n\n        return peak;\n      }\n\n      function drawVisualizationBar(index, barWidth, x, verticalCenter) {\n        if (dataArray[index] > ultimatePeak) {\n          ultimatePeak = dataArray[index];\n        } //take the square of the data like this will amplify peaks\n\n\n        const adjustedData = 8 * dataArray[index] * Math.pow(dataArray[index] / ultimatePeak, 1.5 * (1 - index / dataArray.length)) * ((index + dataArray.length / 2) / dataArray.length);\n        let barHeight = adjustedData;\n        let offsetX = (Math.random() - 0.5) * adjustedData / 32;\n        let offsetY = (Math.random() - 0.5) * adjustedData / 32;\n        let offsetWidth = (Math.random() - 0.5) * adjustedData / 32;\n        frequencyCtx.fillRect(x + offsetX, verticalCenter - barHeight / 4 + offsetY, barWidth + offsetWidth, barHeight / 2);\n      }\n\n      let lowFreqShiftingColorNumber = 0;\n\n      function getLowFrequencyColor(dataArray) {\n        let lowFrequencySum = 0;\n        let lowFrequencyMax = 0;\n\n        for (let i = 0; i < dataArray.length / 2; i++) {\n          lowFrequencySum += dataArray[i];\n\n          if (dataArray[i] > lowFrequencyMax) {\n            lowFrequencyMax = dataArray[i];\n          }\n        }\n\n        let lowFrequencyAverage = lowFrequencySum / (dataArray.length / 2);\n\n        if (lowFrequencyMax > lowFrequencyAverage * 10 || lowFrequencyAverage > ultimatePeak / 2) {\n          lowFreqShiftingColorNumber = (lowFreqShiftingColorNumber + lowFrequencyMax / (lowFrequencyAverage * 20) + lowFrequencyAverage / ultimatePeak) % 255;\n        }\n\n        return `hsl(${map(lowFrequencyAverage, lowFreqShiftingColorNumber, 255, lowFreqShiftingColorNumber / 4, 360)}, 100%, 50%)`;\n      }\n\n      let highFreqShiftingColorNumber = 0;\n\n      function getHighFrequencyColor(dataArray) {\n        let highFrequencySum = 0;\n        let highFrequencyMax = 0;\n\n        for (let i = dataArray.length / 2; i < dataArray.length; i++) {\n          highFrequencySum += dataArray[i];\n\n          if (dataArray[i] > highFrequencyMax) {\n            highFrequencyMax = dataArray[i];\n          }\n        }\n\n        let highFrequencyAverage = highFrequencySum / (dataArray.length / 2);\n\n        if (highFrequencyMax > highFrequencyAverage * 200 || highFrequencyAverage > ultimatePeak / 2) {\n          highFreqShiftingColorNumber = (highFreqShiftingColorNumber + highFrequencyMax / (highFrequencyAverage * 200) + highFrequencyAverage / ultimatePeak) % 255;\n        }\n\n        return `hsl(${map(highFrequencyAverage, highFreqShiftingColorNumber, 255, highFrequencyAverage / 4, 360)}, 100%, 50%)`;\n      }\n\n      function map(value, start1, stop1, start2, stop2) {\n        return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n      }\n\n      drawVisualization();\n    }\n  }, [audioElement]); // Initialize audio context and elements when the file input changes\n\n  function loadAudio() {\n    if (audioElement) {\n      audioElement.pause();\n      audioElement.currentTime = 0;\n    }\n\n    setAudioElement(new Audio());\n  }\n\n  function updatePlayback() {\n    if (audioElement && scrubBarRef.current) {\n      let scrubBarValue = scrubBarRef.current.value;\n      let currentTime = scrubBarValue / 100 * audioElement.duration;\n      audioElement.currentTime = currentTime;\n    }\n  }\n\n  function stopAudio() {\n    if (audioElement) {\n      audioElement.pause();\n      audioElement.currentTime = 0;\n      setPlay(false);\n    }\n  }\n\n  function togglePlay() {\n    if (audioElement) {\n      if (audioElement.paused) {\n        audioElement.play();\n        setPlay(true);\n      } else {\n        audioElement.pause();\n        setPlay(false);\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: props.style,\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        ref: fileInputRef,\n        onChange: loadAudio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    }, this), loaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: togglePlay,\n        children: play ? 'Pause' : 'Play'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopAudio,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: scrubBarRef,\n        type: \"range\",\n        min: \"0\",\n        max: \"100\",\n        defaultValue: 0,\n        id: \"scrub-bar\",\n        disabled: !loaded,\n        onChange: updatePlayback()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: frequencyRef,\n      id: \"frequency\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: backgroundRef,\n      id: \"background\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AudioVisualizer, \"L5RZro3gJoGdEs4wa8X+h5rFiO4=\");\n\n_c = AudioVisualizer;\nexport default AudioVisualizer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioVisualizer\");","map":{"version":3,"sources":["/Users/davidmash/Documents/website/src/Components/AudioVisualizer.js"],"names":["React","useRef","useState","useEffect","AudioVisualizer","props","audioElement","setAudioElement","loaded","setLoaded","fileInputRef","frequencyRef","backgroundRef","scrubBarRef","play","setPlay","audioCtx","window","AudioContext","webkitAudioContext","source","createMediaElementSource","analyser","createAnalyser","connect","destination","bufferLength","frequencyBinCount","dataArray","Uint8Array","updateScrubBar","current","currentTime","duration","scrubBarValue","value","addEventListener","src","URL","createObjectURL","files","willReadFrequently","frequencyCtx","getContext","smudgeCtx","width","innerWidth","height","innerHeight","ultimatePeak","rotationAngle","rotateSmudge","smudgeVelocity","drawVisualization","requestAnimationFrame","getByteFrequencyData","clearRect","canvas","avgAmplitude","highFreqAvgAmplitude","midFreqAvgAmplitude","lowFreqAvgAmplitude","lowFreqPeakAmplitude","length","gradient","createLinearGradient","highFrequencyColor","getHighFrequencyColor","addColorStop","getLowFrequencyColor","fillStyle","verticalCenter","barWidth","x","i","drawVisualizationBar","getAverageAmplitude","getPeakAmplitude","globalAlpha","Math","abs","console","log","save","translate","rotate","PI","drawImage","restore","imageDataTop","getImageData","imageDataBottom","putImageData","data","startIndex","endIndex","trunc","min","sum","peak","max","index","adjustedData","pow","barHeight","offsetX","random","offsetY","offsetWidth","fillRect","lowFreqShiftingColorNumber","lowFrequencySum","lowFrequencyMax","lowFrequencyAverage","map","highFreqShiftingColorNumber","highFrequencySum","highFrequencyMax","highFrequencyAverage","start1","stop1","start2","stop2","loadAudio","pause","Audio","updatePlayback","stopAudio","togglePlay","paused","style"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\n\nfunction AudioVisualizer(props) {\n    const [audioElement, setAudioElement] = useState(null);\n    const [loaded, setLoaded] = useState(false);\n    const fileInputRef = useRef(null);\n    const frequencyRef = useRef(null);\n    const backgroundRef = useRef(null);\n    const scrubBarRef = useRef(null);\n    const [play, setPlay] = useState(false);\n\n    useEffect(() => {\n        if (audioElement) {\n            const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n            const source = audioCtx.createMediaElementSource(audioElement);\n            const analyser = audioCtx.createAnalyser();\n            source.connect(analyser);\n            analyser.connect(audioCtx.destination);\n            const bufferLength = analyser.frequencyBinCount;\n            let dataArray = new Uint8Array(bufferLength);\n\n            function updateScrubBar() {\n                if(audioElement && scrubBarRef.current) {\n                    let currentTime = audioElement.currentTime;\n                    let duration = audioElement.duration;\n                    let scrubBarValue = (currentTime/duration)*100;\n                    scrubBarRef.current.value = scrubBarValue;\n                }\n            }\n\n            audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n            audioElement.src = URL.createObjectURL(fileInputRef.current.files[0]);\n            audioElement.addEventListener(\"loadeddata\", () => {\n                setLoaded(true);\n            });\n            audioElement.addEventListener(\"ended\", () => {\n                setPlay(false);\n            });\n\n            frequencyRef.current.willReadFrequently = true;\n            backgroundRef.current.willReadFrequently = true;\n            const frequencyCtx = frequencyRef.current.getContext(\"2d\");\n            const smudgeCtx = backgroundRef.current.getContext(\"2d\");\n            backgroundRef.current.width = window.innerWidth;\n            backgroundRef.current.height = window.innerHeight;\n            frequencyRef.current.width = window.innerWidth;\n            frequencyRef.current.height = window.innerHeight;\n\n            window.addEventListener(\"resize\", () => {\n                backgroundRef.current.width = window.innerWidth;\n                backgroundRef.current.height = window.innerHeight;\n                frequencyRef.current.width = window.innerWidth;\n                frequencyRef.current.height = window.innerHeight;\n            });\n\n            let ultimatePeak = 1;\n            let rotationAngle = 0;\n            let rotateSmudge = false;\n            let smudgeVelocity = 0;\n            // Draw the frequency spectrum visualization\n            function drawVisualization() {\n                requestAnimationFrame(drawVisualization);\n                analyser.getByteFrequencyData(dataArray);\n                \n                // draw current frame to main canvas\n                frequencyCtx.clearRect(0, 0, frequencyCtx.canvas.width, frequencyCtx.canvas.height);\n        \n                let avgAmplitude = 0;\n                let highFreqAvgAmplitude = 0;\n                let midFreqAvgAmplitude = 0;\n                let lowFreqAvgAmplitude = 0;\n                let lowFreqPeakAmplitude = 0;\n                if (dataArray && dataArray.length > 0) {\n                    let gradient = frequencyCtx.createLinearGradient(0, 0, frequencyCtx.canvas.width, 0);\n                    let highFrequencyColor = getHighFrequencyColor(dataArray);\n                    gradient.addColorStop(0, highFrequencyColor);\n                    gradient.addColorStop(0.5, getLowFrequencyColor(dataArray));\n                    gradient.addColorStop(1, highFrequencyColor);\n                    frequencyCtx.fillStyle = gradient;\n                    let verticalCenter = frequencyCtx.canvas.height / 2;\n                    let barWidth = (frequencyCtx.canvas.width / dataArray.length);\n                    let x = 0;\n                    for (let i = dataArray.length - 1; i > 0 ; i--) {\n                        drawVisualizationBar(i, barWidth, x, verticalCenter);\n                        x += (barWidth);\n                    }\n                    for (let i = 0; i < dataArray.length; i++) {\n                        drawVisualizationBar(i, barWidth, x, verticalCenter);\n                        x += (barWidth);\n                    }\n                    avgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length);\n                    highFreqAvgAmplitude = getAverageAmplitude(dataArray, 12 * dataArray.length / 16, dataArray.length);\n                    midFreqAvgAmplitude = getAverageAmplitude(dataArray, dataArray.length / 16, 3 * dataArray.length / 16);\n                    lowFreqAvgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length / 16);\n                    lowFreqPeakAmplitude = getPeakAmplitude(dataArray, 0, dataArray.length / 16);\n                    frequencyCtx.globalAlpha = Math.abs(0.2 - (avgAmplitude / 100)) + 0.1;\n                }\n\n                console.log(highFreqAvgAmplitude + \" \" + midFreqAvgAmplitude + \" \" + lowFreqAvgAmplitude + \" \" + avgAmplitude + \" \" + ultimatePeak);\n\n                //smudge effect\n                rotateSmudge = (rotateSmudge && !(lowFreqPeakAmplitude > ultimatePeak * 1.01) && midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 1.8) || midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 3.2;\n                if (rotateSmudge) {\n                    rotationAngle = (rotationAngle + 1) % 360;\n                    smudgeVelocity = (lowFreqAvgAmplitude) / 60 * (midFreqAvgAmplitude < highFreqAvgAmplitude)? -1: 1;\n                    // Save the current canvas state\n                    smudgeCtx.save();\n                    // Rotate the canvas\n                    smudgeCtx.translate(smudgeCtx.canvas.width / 2, smudgeCtx.canvas.height / 2);\n                    smudgeCtx.rotate(Math.PI / 180 * rotationAngle * smudgeVelocity);\n                    smudgeCtx.translate(-smudgeCtx.canvas.width / 2, -smudgeCtx.canvas.height / 2);\n                    // Draw the smudged image on the canvas\n                    smudgeCtx.globalAlpha = Math.abs(0.5 - (avgAmplitude / 100)) / 10;\n                    smudgeCtx.drawImage(smudgeCtx.canvas, 0, 0);\n                    // Restore the canvas state\n                    smudgeCtx.restore();\n                } else {\n                    rotationAngle = 0;\n                    var imageDataTop = smudgeCtx.getImageData(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height / 2);\n                    var imageDataBottom = smudgeCtx.getImageData(0, smudgeCtx.canvas.height / 2, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n                    smudgeCtx.clearRect(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n                    smudgeCtx.globalAlpha = 0.5 - (avgAmplitude / 100);\n                    smudgeVelocity = (avgAmplitude < 10)? avgAmplitude * 2: ((lowFreqPeakAmplitude >= ultimatePeak && lowFreqAvgAmplitude * 0.6 > midFreqAvgAmplitude + highFreqAvgAmplitude)? -1: 1) * avgAmplitude / 4;\n                    smudgeCtx.putImageData(imageDataTop, 0, -smudgeVelocity);\n                    smudgeCtx.putImageData(imageDataBottom, 0, smudgeCtx.canvas.height / 2 + smudgeVelocity);\n                }\n                smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n            }\n        \n            function getAverageAmplitude(data, startIndex, endIndex) {\n                startIndex = Math.trunc(startIndex);\n                endIndex = Math.min(Math.trunc(endIndex), data.length);\n                let sum = 0;\n                for (let i = startIndex; i < endIndex; i++) {\n                    sum += data[i];\n                }\n                return sum / (endIndex - startIndex - 1);\n            }\n        \n            function getPeakAmplitude(data, startIndex, endIndex) {\n                startIndex = Math.trunc(startIndex);\n                endIndex = Math.min(Math.trunc(endIndex), data.length);\n                let peak = 0;\n                for (let i = startIndex; i < endIndex; i++) {\n                    peak = Math.max(peak, data[i]);\n                }\n                return peak;\n            }\n        \n            function drawVisualizationBar(index, barWidth, x, verticalCenter) {\n                if (dataArray[index] > ultimatePeak) {\n                    ultimatePeak = dataArray[index];\n                }\n                //take the square of the data like this will amplify peaks\n                const adjustedData = 8 * dataArray[index] * Math.pow(dataArray[index] / ultimatePeak, 1.5 * (1 - (index / dataArray.length))) * ((index + (dataArray.length / 2)) / dataArray.length);\n                let barHeight = adjustedData;\n                let offsetX = (Math.random() - 0.5) * adjustedData / 32;\n                let offsetY = (Math.random() - 0.5) * adjustedData / 32;\n                let offsetWidth = (Math.random() - 0.5) * adjustedData / 32;\n                frequencyCtx.fillRect(x + offsetX, verticalCenter - (barHeight / 4) + offsetY, barWidth + offsetWidth, barHeight / 2);\n            }\n        \n            let lowFreqShiftingColorNumber = 0;\n            function getLowFrequencyColor(dataArray) {\n                let lowFrequencySum = 0;\n                let lowFrequencyMax = 0;\n                for (let i = 0; i < dataArray.length / 2; i++) {\n                    lowFrequencySum += dataArray[i];\n                    if (dataArray[i] > lowFrequencyMax) {\n                        lowFrequencyMax = dataArray[i];\n                    }\n                }\n                let lowFrequencyAverage = lowFrequencySum / (dataArray.length / 2);\n                if (lowFrequencyMax > lowFrequencyAverage * 10 || lowFrequencyAverage > ultimatePeak / 2) {\n                    lowFreqShiftingColorNumber = (lowFreqShiftingColorNumber + (lowFrequencyMax / (lowFrequencyAverage * 20)) + (lowFrequencyAverage / ultimatePeak)) % 255;\n                }\n                return `hsl(${map(lowFrequencyAverage, lowFreqShiftingColorNumber, 255, lowFreqShiftingColorNumber / 4, 360)}, 100%, 50%)`;\n            }\n        \n            let highFreqShiftingColorNumber = 0;\n            function getHighFrequencyColor(dataArray) {\n                let highFrequencySum = 0;\n                let highFrequencyMax = 0;\n                for (let i = dataArray.length / 2; i < dataArray.length; i++) {\n                    highFrequencySum += dataArray[i];\n                    if (dataArray[i] > highFrequencyMax) {\n                        highFrequencyMax = dataArray[i];\n                    }\n                }\n                let highFrequencyAverage = highFrequencySum / (dataArray.length/ 2);\n                if (highFrequencyMax > highFrequencyAverage * 200 || highFrequencyAverage > ultimatePeak / 2) {\n                    highFreqShiftingColorNumber = (highFreqShiftingColorNumber + (highFrequencyMax / (highFrequencyAverage * 200)) + (highFrequencyAverage / ultimatePeak)) % 255;\n                }\n                return `hsl(${map(highFrequencyAverage, highFreqShiftingColorNumber, 255, highFrequencyAverage / 4, 360)}, 100%, 50%)`;\n            }\n        \n            function map(value, start1, stop1, start2, stop2) {\n                return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n            }\n\n            drawVisualization();\n        }\n    }, [audioElement]);\n\n    // Initialize audio context and elements when the file input changes\n    function loadAudio() {\n        if (audioElement) {\n            audioElement.pause();\n            audioElement.currentTime = 0;\n        }\n        setAudioElement(new Audio());\n    }\n\n    function updatePlayback() {\n        if(audioElement && scrubBarRef.current) {\n            let scrubBarValue = scrubBarRef.current.value;\n            let currentTime = (scrubBarValue / 100) * audioElement.duration;\n            audioElement.currentTime = currentTime;\n        }\n    }\n\n    function stopAudio() {\n        if (audioElement) {\n            audioElement.pause();\n            audioElement.currentTime = 0;\n            setPlay(false);\n        }\n    }\n\n    function togglePlay() {\n        if (audioElement) {\n            if (audioElement.paused) {\n                audioElement.play();\n                setPlay(true);\n            } else {\n                audioElement.pause();\n                setPlay(false);\n            }\n        }\n    }\n\n    return (\n        <div style={props.style}>\n            <br />\n            <br />\n            <div className=\"control-panel\">\n                <input type=\"file\" ref={fileInputRef} onChange={loadAudio} />\n            </div>\n            {loaded?\n            <div className=\"control-panel\">\n                <button onClick={togglePlay}>{play ? 'Pause' : 'Play'}</button>\n                <button onClick={stopAudio}>Stop</button>\n                <input ref={scrubBarRef} type=\"range\" min=\"0\" max=\"100\" defaultValue={0} id=\"scrub-bar\" disabled={!loaded} onChange={updatePlayback()}/>\n            </div>\n            :\n            <></>\n            }\n            <br />\n            <canvas ref={frequencyRef} id=\"frequency\" />\n            <canvas ref={backgroundRef} id=\"background\" />\n        </div>\n    );\n}\n\nexport default AudioVisualizer;\n"]},"metadata":{},"sourceType":"module"}