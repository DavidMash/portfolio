{"ast":null,"code":"var _jsxFileName = \"/Users/davidmash/Documents/website/src/Components/AudioVisualizer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction AudioVisualizer(props) {\n  _s();\n\n  const [audioCtx, setAudioCtx] = useState(null);\n  const [audioElement, setAudioElement] = useState(null);\n  const [source, setSource] = useState(null);\n  const [analyser, setAnalyser] = useState(null);\n  const [bufferLength, setBufferLength] = useState(null);\n  const [dataArray, setDataArray] = useState(null);\n  const [frequencyCtx, setFrequencyCtx] = useState(null);\n  const [smudgeCtx, setSmudgeCtx] = useState(null);\n  const [loaded, setLoaded] = useState(false);\n  const [ultimatePeak, setUltimatePeak] = useState(1);\n  const fileInputRef = useRef(null);\n  const frequencyRef = useRef(null);\n  const backgroundRef = useRef(null);\n  const scrubBarRef = useRef(null);\n  const [play, setPlay] = useState(false);\n  useEffect(() => {\n    function updateScrubBar() {\n      if (audioElement && scrubBarRef.current) {\n        let currentTime = audioElement.currentTime;\n        let duration = audioElement.duration;\n        let scrubBarValue = currentTime / duration * 100;\n        scrubBarRef.current.value = scrubBarValue;\n      }\n    }\n\n    if (audioElement) {\n      audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n      audioElement.src = URL.createObjectURL(fileInputRef.current.files[0]);\n      audioElement.addEventListener(\"loadeddata\", () => {\n        setLoaded(true);\n      });\n      audioElement.addEventListener(\"ended\", () => {\n        setPlay(false);\n      });\n      setSource(audioCtx.createMediaElementSource(audioElement));\n    }\n  }, [audioElement, audioCtx]);\n  useEffect(() => {\n    if (source) {\n      setAnalyser(audioCtx.createAnalyser());\n    }\n  }, [source, audioCtx]);\n  useEffect(() => {\n    if (analyser && source) {\n      source.connect(analyser);\n      analyser.connect(audioCtx.destination);\n      setBufferLength(analyser.frequencyBinCount);\n      setDataArray(new Uint8Array(bufferLength));\n      setUltimatePeak(1);\n    }\n  }, [analyser, audioCtx, bufferLength, source]);\n  useEffect(() => {\n    if (dataArray) {\n      drawVisualization();\n    }\n  }, [dataArray, drawVisualization]); // Initialize audio context and elements when the file input changes\n\n  function loadAudio() {\n    if (audioElement) {\n      audioElement.pause();\n      audioElement.currentTime = 0;\n    }\n\n    setAudioCtx(new (window.AudioContext || window.webkitAudioContext)());\n    setAudioElement(new Audio());\n  }\n\n  function updatePlayback() {\n    if (audioElement && scrubBarRef.current) {\n      let scrubBarValue = scrubBarRef.current.value;\n      let currentTime = scrubBarValue / 100 * audioElement.duration;\n      audioElement.currentTime = currentTime;\n    }\n  }\n\n  useEffect(() => {\n    setFrequencyCtx(frequencyRef.current.getContext(\"2d\"));\n    setSmudgeCtx(backgroundRef.current.getContext(\"2d\"));\n    window.addEventListener(\"resize\", () => {\n      backgroundRef.current.width = window.innerWidth;\n      backgroundRef.current.height = window.innerHeight;\n      frequencyRef.current.width = window.innerWidth;\n      frequencyRef.current.height = window.innerHeight;\n    });\n  }, []);\n  let rotationAngle = 0;\n  let rotateSmudge = false;\n  let smudgeVelocity = 0; // Draw the frequency spectrum visualization\n\n  function drawVisualization() {\n    requestAnimationFrame(drawVisualization);\n    analyser.getByteFrequencyData(dataArray); // draw current frame to main canvas\n\n    frequencyCtx.clearRect(0, 0, frequencyCtx.canvas.width, frequencyCtx.canvasheight);\n    let avgAmplitude = 0;\n    let highFreqAvgAmplitude = 0;\n    let midFreqAvgAmplitude = 0;\n    let lowFreqAvgAmplitude = 0;\n    let lowFreqPeakAmplitude = 0;\n\n    if (dataArray && dataArray.length > 0) {\n      let gradient = frequencyCtx.createLinearGradient(0, 0, frequencyCtx.canvas.width, 0);\n      let highFrequencyColor = getHighFrequencyColor(dataArray);\n      gradient.addColorStop(0, highFrequencyColor);\n      gradient.addColorStop(0.5, getLowFrequencyColor(dataArray));\n      gradient.addColorStop(1, highFrequencyColor);\n      frequencyCtx.fillStyle = gradient;\n      let verticalCenter = frequencyCtx.height / 2;\n      let barWidth = 600 / bufferLength * 2.5 / 2;\n      let x = 0;\n\n      for (let i = bufferLength - 1; i > 0; i--) {\n        drawVisualizationBar(i, barWidth, x, verticalCenter);\n        x += (barWidth + 1) / 2;\n      }\n\n      for (let i = 0; i < bufferLength; i++) {\n        drawVisualizationBar(i, barWidth, x, verticalCenter);\n        x += (barWidth + 1) / 2;\n      }\n\n      avgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length);\n      highFreqAvgAmplitude = getAverageAmplitude(dataArray, 12 * dataArray.length / 16, dataArray.length);\n      midFreqAvgAmplitude = getAverageAmplitude(dataArray, dataArray.length / 16, 3 * dataArray.length / 16);\n      lowFreqAvgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length / 16);\n      lowFreqPeakAmplitude = getPeakAmplitude(dataArray, 0, dataArray.length / 16);\n      frequencyCtx.globalAlpha = Math.abs(0.2 - avgAmplitude / 100) + 0.1;\n    } //smudge effect\n\n\n    rotateSmudge = rotateSmudge && !(lowFreqPeakAmplitude > ultimatePeak * 1.01) && midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 1.8 || midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 3.2;\n\n    if (rotateSmudge) {\n      rotationAngle = (rotationAngle + 1) % 360;\n      smudgeVelocity = lowFreqAvgAmplitude / 60 * (midFreqAvgAmplitude < highFreqAvgAmplitude) ? -1 : 1; // Save the current canvas state\n\n      smudgeCtx.save(); // Rotate the canvas\n\n      smudgeCtx.translate(smudgeCtx.canvas.width / 2, smudgeCtx.canvas.height / 2);\n      smudgeCtx.rotate(Math.PI / 180 * rotationAngle * smudgeVelocity);\n      smudgeCtx.translate(-smudgeCtx.canvas.width / 2, -smudgeCtx.canvas.height / 2); // Draw the smudged image on the canvas\n\n      smudgeCtx.globalAlpha = Math.abs(0.5 - avgAmplitude / 100) / 10;\n      smudgeCtx.drawImage(smudgeCtx.canvas, 0, 0); // Restore the canvas state\n\n      smudgeCtx.restore();\n    } else {\n      rotationAngle = 0;\n      var imageDataTop = smudgeCtx.getImageData(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height / 2);\n      var imageDataBottom = smudgeCtx.getImageData(0, smudgeCtx.canvas.height / 2, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n      smudgeCtx.clearRect(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n      smudgeCtx.globalAlpha = 0.5 - avgAmplitude / 100;\n      smudgeVelocity = avgAmplitude < 10 ? avgAmplitude * 2 : (lowFreqPeakAmplitude >= ultimatePeak && lowFreqAvgAmplitude * 0.6 > midFreqAvgAmplitude + highFreqAvgAmplitude ? -1 : 1) * avgAmplitude / 4;\n      smudgeCtx.putImageData(imageDataTop, 0, -smudgeVelocity);\n      smudgeCtx.putImageData(imageDataBottom, 0, smudgeCtx.canvas.height / 2 + smudgeVelocity);\n    }\n\n    smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n  }\n\n  function getAverageAmplitude(data, startIndex, endIndex) {\n    startIndex = Math.trunc(startIndex);\n    endIndex = Math.min(Math.trunc(endIndex), data.length);\n    let sum = 0;\n\n    for (let i = startIndex; i < endIndex; i++) {\n      sum += data[i];\n    }\n\n    return sum / (endIndex - startIndex - 1);\n  }\n\n  function getPeakAmplitude(data, startIndex, endIndex) {\n    startIndex = Math.trunc(startIndex);\n    endIndex = Math.min(Math.trunc(endIndex), data.length);\n    let peak = 0;\n\n    for (let i = startIndex; i < endIndex; i++) {\n      peak = Math.max(peak, data[i]);\n    }\n\n    return peak;\n  }\n\n  function drawVisualizationBar(index, barWidth, x, verticalCenter) {\n    if (dataArray[index] > ultimatePeak) {\n      setUltimatePeak(dataArray[index]);\n    } //take the square of the data like this will amplify peaks\n\n\n    const adjustedData = 8 * dataArray[index] * Math.pow(dataArray[index] / ultimatePeak, 1.5 * (1 - index / dataArray.length)) * ((index + dataArray.length / 2) / dataArray.length);\n    let barHeight = adjustedData;\n    let offsetX = (Math.random() - 0.5) * adjustedData / 32;\n    let offsetY = (Math.random() - 0.5) * adjustedData / 32;\n    let offsetWidth = (Math.random() - 0.5) * adjustedData / 32;\n    frequencyCtx.fillRect(x + offsetX, verticalCenter - barHeight / 4 + offsetY, barWidth + offsetWidth, barHeight / 2);\n  }\n\n  let lowFreqShiftingColorNumber = 0;\n\n  function getLowFrequencyColor(dataArray) {\n    let lowFrequencySum = 0;\n    let lowFrequencyMax = 0;\n\n    for (let i = 0; i < dataArray.length / 2; i++) {\n      lowFrequencySum += dataArray[i];\n\n      if (dataArray[i] > lowFrequencyMax) {\n        lowFrequencyMax = dataArray[i];\n      }\n    }\n\n    let lowFrequencyAverage = lowFrequencySum / (dataArray.length / 2);\n\n    if (lowFrequencyMax > lowFrequencyAverage * 10 || lowFrequencyAverage > ultimatePeak / 2) {\n      lowFreqShiftingColorNumber = (lowFreqShiftingColorNumber + lowFrequencyMax / (lowFrequencyAverage * 20) + lowFrequencyAverage / ultimatePeak) % 255;\n    }\n\n    return `hsl(${map(lowFrequencyAverage, lowFreqShiftingColorNumber, 255, lowFreqShiftingColorNumber / 4, 360)}, 100%, 50%)`;\n  }\n\n  let highFreqShiftingColorNumber = 0;\n\n  function getHighFrequencyColor(dataArray) {\n    let highFrequencySum = 0;\n    let highFrequencyMax = 0;\n\n    for (let i = dataArray.length / 2; i < dataArray.length; i++) {\n      console.log(\"HEHE: \" + highFrequencySum);\n      highFrequencySum += dataArray[i];\n\n      if (dataArray[i] > highFrequencyMax) {\n        highFrequencyMax = dataArray[i];\n      }\n    }\n\n    let highFrequencyAverage = highFrequencySum / (dataArray.length / 2);\n\n    if (highFrequencyMax > highFrequencyAverage * 200 || highFrequencyAverage > ultimatePeak / 2) {\n      highFreqShiftingColorNumber = (highFreqShiftingColorNumber + highFrequencyMax / (highFrequencyAverage * 200) + highFrequencyAverage / ultimatePeak) % 255;\n    }\n\n    return `hsl(${map(highFrequencyAverage, highFreqShiftingColorNumber, 255, highFrequencyAverage / 4, 360)}, 100%, 50%)`;\n  }\n\n  function map(value, start1, stop1, start2, stop2) {\n    return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n  }\n\n  function stopAudio() {\n    if (audioElement) {\n      audioElement.pause();\n      audioElement.currentTime = 0;\n      setPlay(false);\n    }\n  }\n\n  function togglePlay() {\n    if (audioElement) {\n      if (audioElement.paused) {\n        audioElement.play();\n        setPlay(true);\n      } else {\n        audioElement.pause();\n        setPlay(false);\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: props.style,\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      ref: fileInputRef,\n      onChange: loadAudio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }, this), loaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: togglePlay,\n        children: play ? 'Pause' : 'Play'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopAudio,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: scrubBarRef,\n        type: \"range\",\n        min: \"0\",\n        max: \"100\",\n        defaultValue: 0,\n        id: \"scrub-bar\",\n        disabled: !loaded,\n        onChange: updatePlayback()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: frequencyRef,\n      id: \"frequency\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: backgroundRef,\n      id: \"background\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AudioVisualizer, \"/zBf7sD78lkSPVQF+NSdNH9VbPc=\");\n\n_c = AudioVisualizer;\nexport default AudioVisualizer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioVisualizer\");","map":{"version":3,"sources":["/Users/davidmash/Documents/website/src/Components/AudioVisualizer.js"],"names":["React","useRef","useState","useEffect","AudioVisualizer","props","audioCtx","setAudioCtx","audioElement","setAudioElement","source","setSource","analyser","setAnalyser","bufferLength","setBufferLength","dataArray","setDataArray","frequencyCtx","setFrequencyCtx","smudgeCtx","setSmudgeCtx","loaded","setLoaded","ultimatePeak","setUltimatePeak","fileInputRef","frequencyRef","backgroundRef","scrubBarRef","play","setPlay","updateScrubBar","current","currentTime","duration","scrubBarValue","value","addEventListener","src","URL","createObjectURL","files","createMediaElementSource","createAnalyser","connect","destination","frequencyBinCount","Uint8Array","drawVisualization","loadAudio","pause","window","AudioContext","webkitAudioContext","Audio","updatePlayback","getContext","width","innerWidth","height","innerHeight","rotationAngle","rotateSmudge","smudgeVelocity","requestAnimationFrame","getByteFrequencyData","clearRect","canvas","canvasheight","avgAmplitude","highFreqAvgAmplitude","midFreqAvgAmplitude","lowFreqAvgAmplitude","lowFreqPeakAmplitude","length","gradient","createLinearGradient","highFrequencyColor","getHighFrequencyColor","addColorStop","getLowFrequencyColor","fillStyle","verticalCenter","barWidth","x","i","drawVisualizationBar","getAverageAmplitude","getPeakAmplitude","globalAlpha","Math","abs","save","translate","rotate","PI","drawImage","restore","imageDataTop","getImageData","imageDataBottom","putImageData","data","startIndex","endIndex","trunc","min","sum","peak","max","index","adjustedData","pow","barHeight","offsetX","random","offsetY","offsetWidth","fillRect","lowFreqShiftingColorNumber","lowFrequencySum","lowFrequencyMax","lowFrequencyAverage","map","highFreqShiftingColorNumber","highFrequencySum","highFrequencyMax","console","log","highFrequencyAverage","start1","stop1","start2","stop2","stopAudio","togglePlay","paused","style"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\n\nfunction AudioVisualizer(props) {\n    const [audioCtx, setAudioCtx] = useState(null);\n    const [audioElement, setAudioElement] = useState(null);\n    const [source, setSource] = useState(null);\n    const [analyser, setAnalyser] = useState(null);\n    const [bufferLength, setBufferLength] = useState(null);\n    const [dataArray, setDataArray] = useState(null);\n    const [frequencyCtx, setFrequencyCtx] = useState(null);\n    const [smudgeCtx, setSmudgeCtx] = useState(null);\n    const [loaded, setLoaded] = useState(false);\n    const [ultimatePeak, setUltimatePeak] = useState(1);\n    const fileInputRef = useRef(null);\n    const frequencyRef = useRef(null);\n    const backgroundRef = useRef(null);\n    const scrubBarRef = useRef(null);\n    const [play, setPlay] = useState(false);\n\n    useEffect(() => {\n        function updateScrubBar() {\n            if(audioElement && scrubBarRef.current) {\n                let currentTime = audioElement.currentTime;\n                let duration = audioElement.duration;\n                let scrubBarValue = (currentTime/duration)*100;\n                scrubBarRef.current.value = scrubBarValue;\n            }\n        }\n        if (audioElement) {\n          audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n          audioElement.src = URL.createObjectURL(fileInputRef.current.files[0]);\n          audioElement.addEventListener(\"loadeddata\", () => {\n            setLoaded(true);\n          });\n          audioElement.addEventListener(\"ended\", () => {\n            setPlay(false);\n          });\n          setSource(audioCtx.createMediaElementSource(audioElement));\n        }\n    }, [audioElement, audioCtx]);\n\n    useEffect(() => {\n        if (source) {\n            setAnalyser(audioCtx.createAnalyser());\n        }\n    }, [source, audioCtx]);\n\n    useEffect(() => {\n        if (analyser && source) {\n            source.connect(analyser);\n            analyser.connect(audioCtx.destination);\n            setBufferLength(analyser.frequencyBinCount);\n            setDataArray(new Uint8Array(bufferLength));\n            setUltimatePeak(1);\n        }\n    }, [analyser, audioCtx, bufferLength, source]);\n\n    useEffect(() => {\n        if (dataArray) {\n            drawVisualization();\n        }\n    }, [dataArray, drawVisualization]);\n\n    // Initialize audio context and elements when the file input changes\n    function loadAudio() {\n        if (audioElement) {\n            audioElement.pause();\n            audioElement.currentTime = 0;\n        }\n        setAudioCtx(new (window.AudioContext || window.webkitAudioContext)());\n        setAudioElement(new Audio());\n    }\n\n    function updatePlayback() {\n        if(audioElement && scrubBarRef.current) {\n            let scrubBarValue = scrubBarRef.current.value;\n            let currentTime = (scrubBarValue / 100) * audioElement.duration;\n            audioElement.currentTime = currentTime;\n        }\n    }\n\n    useEffect(() => {\n        setFrequencyCtx(frequencyRef.current.getContext(\"2d\"));\n        setSmudgeCtx(backgroundRef.current.getContext(\"2d\"));\n\n        window.addEventListener(\"resize\", () => {\n            backgroundRef.current.width = window.innerWidth;\n            backgroundRef.current.height = window.innerHeight;\n            frequencyRef.current.width = window.innerWidth;\n            frequencyRef.current.height = window.innerHeight;\n        });\n    }, []);\n\n    let rotationAngle = 0;\n    let rotateSmudge = false;\n    let smudgeVelocity = 0;\n    // Draw the frequency spectrum visualization\n    function drawVisualization() {\n        requestAnimationFrame(drawVisualization);\n        analyser.getByteFrequencyData(dataArray);\n        \n        // draw current frame to main canvas\n        frequencyCtx.clearRect(0, 0, frequencyCtx.canvas.width, frequencyCtx.canvasheight);\n\n        let avgAmplitude = 0;\n        let highFreqAvgAmplitude = 0;\n        let midFreqAvgAmplitude = 0;\n        let lowFreqAvgAmplitude = 0;\n        let lowFreqPeakAmplitude = 0;\n        if (dataArray && dataArray.length > 0) {\n            let gradient = frequencyCtx.createLinearGradient(0, 0, frequencyCtx.canvas.width, 0);\n            let highFrequencyColor = getHighFrequencyColor(dataArray);\n            gradient.addColorStop(0, highFrequencyColor);\n            gradient.addColorStop(0.5, getLowFrequencyColor(dataArray));\n            gradient.addColorStop(1, highFrequencyColor);\n            frequencyCtx.fillStyle = gradient;\n            let verticalCenter = frequencyCtx.height / 2;\n            let barWidth = (600 / bufferLength) * 2.5 / 2;\n            let x = 0;\n            for (let i = bufferLength - 1; i > 0 ; i--) {\n                drawVisualizationBar(i, barWidth, x, verticalCenter);\n                x += (barWidth + 1) / 2;\n            }\n            for (let i = 0; i < bufferLength; i++) {\n                drawVisualizationBar(i, barWidth, x, verticalCenter);\n                x += (barWidth + 1) / 2;\n            }\n            avgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length);\n            highFreqAvgAmplitude = getAverageAmplitude(dataArray, 12 * dataArray.length / 16, dataArray.length);\n            midFreqAvgAmplitude = getAverageAmplitude(dataArray, dataArray.length / 16, 3 * dataArray.length / 16);\n            lowFreqAvgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length / 16);\n            lowFreqPeakAmplitude = getPeakAmplitude(dataArray, 0, dataArray.length / 16);\n            frequencyCtx.globalAlpha = Math.abs(0.2 - (avgAmplitude / 100)) + 0.1;\n        }\n        \n        //smudge effect\n        rotateSmudge = (rotateSmudge && !(lowFreqPeakAmplitude > ultimatePeak * 1.01) && midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 1.8) || midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 3.2;\n        if (rotateSmudge) {\n            rotationAngle = (rotationAngle + 1) % 360;\n            smudgeVelocity = (lowFreqAvgAmplitude) / 60 * (midFreqAvgAmplitude < highFreqAvgAmplitude)? -1: 1;\n            // Save the current canvas state\n            smudgeCtx.save();\n            // Rotate the canvas\n            smudgeCtx.translate(smudgeCtx.canvas.width / 2, smudgeCtx.canvas.height / 2);\n            smudgeCtx.rotate(Math.PI / 180 * rotationAngle * smudgeVelocity);\n            smudgeCtx.translate(-smudgeCtx.canvas.width / 2, -smudgeCtx.canvas.height / 2);\n            // Draw the smudged image on the canvas\n            smudgeCtx.globalAlpha = Math.abs(0.5 - (avgAmplitude / 100)) / 10;\n            smudgeCtx.drawImage(smudgeCtx.canvas, 0, 0);\n            // Restore the canvas state\n            smudgeCtx.restore();\n        } else {\n            rotationAngle = 0;\n            var imageDataTop = smudgeCtx.getImageData(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height / 2);\n            var imageDataBottom = smudgeCtx.getImageData(0, smudgeCtx.canvas.height / 2, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n            smudgeCtx.clearRect(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n            smudgeCtx.globalAlpha = 0.5 - (avgAmplitude / 100);\n            smudgeVelocity = (avgAmplitude < 10)? avgAmplitude * 2: ((lowFreqPeakAmplitude >= ultimatePeak && lowFreqAvgAmplitude * 0.6 > midFreqAvgAmplitude + highFreqAvgAmplitude)? -1: 1) * avgAmplitude / 4;\n            smudgeCtx.putImageData(imageDataTop, 0, -smudgeVelocity);\n            smudgeCtx.putImageData(imageDataBottom, 0, smudgeCtx.canvas.height / 2 + smudgeVelocity);\n        }\n        smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n    }\n\n    function getAverageAmplitude(data, startIndex, endIndex) {\n        startIndex = Math.trunc(startIndex);\n        endIndex = Math.min(Math.trunc(endIndex), data.length);\n        let sum = 0;\n        for (let i = startIndex; i < endIndex; i++) {\n            sum += data[i];\n        }\n        return sum / (endIndex - startIndex - 1);\n    }\n\n    function getPeakAmplitude(data, startIndex, endIndex) {\n        startIndex = Math.trunc(startIndex);\n        endIndex = Math.min(Math.trunc(endIndex), data.length);\n        let peak = 0;\n        for (let i = startIndex; i < endIndex; i++) {\n            peak = Math.max(peak, data[i]);\n        }\n        return peak;\n    }\n\n    function drawVisualizationBar(index, barWidth, x, verticalCenter) {\n        if (dataArray[index] > ultimatePeak) {\n            setUltimatePeak(dataArray[index]);\n        }\n        //take the square of the data like this will amplify peaks\n        const adjustedData = 8 * dataArray[index] * Math.pow(dataArray[index] / ultimatePeak, 1.5 * (1 - (index / dataArray.length))) * ((index + (dataArray.length / 2)) / dataArray.length);\n        let barHeight = adjustedData;\n        let offsetX = (Math.random() - 0.5) * adjustedData / 32;\n        let offsetY = (Math.random() - 0.5) * adjustedData / 32;\n        let offsetWidth = (Math.random() - 0.5) * adjustedData / 32;\n        frequencyCtx.fillRect(x + offsetX, verticalCenter - (barHeight / 4) + offsetY, barWidth + offsetWidth, barHeight / 2);\n    }\n\n    let lowFreqShiftingColorNumber = 0;\n    function getLowFrequencyColor(dataArray) {\n        let lowFrequencySum = 0;\n        let lowFrequencyMax = 0;\n        for (let i = 0; i < dataArray.length / 2; i++) {\n            lowFrequencySum += dataArray[i];\n            if (dataArray[i] > lowFrequencyMax) {\n                lowFrequencyMax = dataArray[i];\n            }\n        }\n        let lowFrequencyAverage = lowFrequencySum / (dataArray.length / 2);\n        if (lowFrequencyMax > lowFrequencyAverage * 10 || lowFrequencyAverage > ultimatePeak / 2) {\n            lowFreqShiftingColorNumber = (lowFreqShiftingColorNumber + (lowFrequencyMax / (lowFrequencyAverage * 20)) + (lowFrequencyAverage / ultimatePeak)) % 255;\n        }\n        return `hsl(${map(lowFrequencyAverage, lowFreqShiftingColorNumber, 255, lowFreqShiftingColorNumber / 4, 360)}, 100%, 50%)`;\n    }\n\n    let highFreqShiftingColorNumber = 0;\n    function getHighFrequencyColor(dataArray) {\n        let highFrequencySum = 0;\n        let highFrequencyMax = 0;\n        for (let i = dataArray.length / 2; i < dataArray.length; i++) {\n            console.log(\"HEHE: \" + highFrequencySum);\n            highFrequencySum += dataArray[i];\n            if (dataArray[i] > highFrequencyMax) {\n                highFrequencyMax = dataArray[i];\n            }\n        }\n        let highFrequencyAverage = highFrequencySum / (dataArray.length/ 2);\n        if (highFrequencyMax > highFrequencyAverage * 200 || highFrequencyAverage > ultimatePeak / 2) {\n            highFreqShiftingColorNumber = (highFreqShiftingColorNumber + (highFrequencyMax / (highFrequencyAverage * 200)) + (highFrequencyAverage / ultimatePeak)) % 255;\n        }\n        return `hsl(${map(highFrequencyAverage, highFreqShiftingColorNumber, 255, highFrequencyAverage / 4, 360)}, 100%, 50%)`;\n    }\n\n    function map(value, start1, stop1, start2, stop2) {\n        return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n    }\n\n    function stopAudio() {\n        if (audioElement) {\n            audioElement.pause();\n            audioElement.currentTime = 0;\n            setPlay(false);\n        }\n    }\n\n    function togglePlay() {\n        if (audioElement) {\n            if (audioElement.paused) {\n                audioElement.play();\n                setPlay(true);\n            } else {\n                audioElement.pause();\n                setPlay(false);\n            }\n        }\n    }\n\n    return (\n        <div style={props.style}>\n            <br />\n            <br />\n            <input type=\"file\" ref={fileInputRef} onChange={loadAudio} />\n            {loaded?\n            <div className=\"control-panel\">\n                <button onClick={togglePlay}>{play ? 'Pause' : 'Play'}</button>\n                <button onClick={stopAudio}>Stop</button>\n                <input ref={scrubBarRef} type=\"range\" min=\"0\" max=\"100\" defaultValue={0} id=\"scrub-bar\" disabled={!loaded} onChange={updatePlayback()}/>\n            </div>\n            :\n            <></>\n            }\n            <br />\n            <canvas ref={frequencyRef} id=\"frequency\" />\n            <canvas ref={backgroundRef} id=\"background\" />\n        </div>\n    );\n}\n\nexport default AudioVisualizer;\n"]},"metadata":{},"sourceType":"module"}