{"ast":null,"code":"var _jsxFileName = \"/Users/davidmash/Documents/website/src/Components/AudioVisualizer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction AudioVisualizer(props) {\n  _s();\n\n  const [audioCtx, setAudioCtx] = useState(null);\n  const [audioElement, setAudioElement] = useState(null);\n  const [source, setSource] = useState(null);\n  const [analyser, setAnalyser] = useState(null);\n  const [bufferLength, setBufferLength] = useState(null);\n  const [dataArray, setDataArray] = useState(null);\n  const [loaded, setLoaded] = useState(false);\n  const [ultimate, setUltimatePeak] = useState(1);\n  const fileInputRef = useRef(null);\n  const frequencyRef = useRef(null);\n  const backgroundRef = useRef(null);\n  const scrubBarRef = useRef(null);\n  const [play, setPlay] = useState(false); // Initialize audio context and elements when the file input changes\n\n  function loadAudio() {\n    if (audioElement) {\n      audioElement.pause();\n      audioElement.currentTime = 0;\n    }\n\n    setAudioCtx(new (window.AudioContext || window.webkitAudioContext)());\n    setAudioElement(new Audio(), () => {\n      console.log(\"1\");\n      audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n      audioElement.src = URL.createObjectURL(fileInputRef.current.files[0]);\n      audioElement.addEventListener(\"loadeddata\", () => {\n        console.log(\"1\");\n        setLoaded(true);\n        scrubBarRef.value = 0;\n      });\n      audioElement.addEventListener(\"ended\", () => {\n        console.log(\"2\");\n        setPlay(false);\n      });\n      setSource(audioCtx.createMediaElementSource(audioElement), () => {\n        console.log(\"3\");\n        setAnalyser(audioCtx.createAnalyser(), () => {\n          source.connect(analyser);\n          analyser.connect(audioCtx.destination);\n          setBufferLength(analyser.frequencyBinCount);\n          setDataArray(new Uint8Array(bufferLength));\n          setUltimatePeak(1);\n          drawVisualization();\n        });\n      });\n    });\n  }\n\n  function updateScrubBar() {\n    if (audioElement) {\n      let currentTime = audioElement.currentTime;\n      let duration = audioElement.duration;\n      let scrubBarValue = currentTime / duration * 100;\n      scrubBarRef.value = scrubBarValue;\n    }\n  }\n\n  function updatePlayback() {\n    if (audioElement) {\n      let scrubBarValue = scrubBarRef.value;\n      let currentTime = scrubBarValue / 100 * audioElement.duration;\n      audioElement.currentTime = currentTime;\n    }\n  }\n\n  useEffect(() => {\n    //update sizes\n    backgroundRef.current.width = window.innerWidth;\n    backgroundRef.current.height = window.innerHeight;\n    frequencyRef.current.width = window.innerWidth;\n    frequencyRef.current.height = window.innerHeight;\n    window.addEventListener(\"resize\", () => {\n      backgroundRef.current.width = window.innerWidth;\n      backgroundRef.current.height = window.innerHeight;\n      frequencyRef.current.width = window.innerWidth;\n      frequencyRef.current.height = window.innerHeight;\n    });\n  }, []);\n\n  function drawVisualization() {\n    requestAnimationFrame(drawVisualization);\n    analyser.getByteFrequencyData(dataArray);\n    frequencyRef.current.fillStyle = \"rgba(0, 0, 0, 0.1)\";\n    frequencyRef.current.fillRect(0, 0, frequencyRef.current.width, frequencyRef.current.height);\n    let barWidth = frequencyRef.current.width / bufferLength * 2.5;\n    let barHeight;\n    let x = 0;\n\n    for (let i = 0; i < bufferLength; i++) {\n      barHeight = dataArray[i];\n      let r = barHeight + 25 * (i / bufferLength);\n      let g = 250 * (i / bufferLength);\n      let b = 50;\n      frequencyRef.current.fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n      frequencyRef.current.fillRect(x, frequencyRef.current.height - barHeight / 2, barWidth, barHeight / 2);\n      x += barWidth + 1;\n    }\n  }\n\n  function stopAudio() {\n    if (audioElement) {\n      audioElement.pause();\n      audioElement.currentTime = 0;\n      setPlay(false);\n    }\n  }\n\n  function togglePlay() {\n    if (audioElement) {\n      if (audioElement.paused) {\n        audioElement.play();\n        setPlay(true);\n      } else {\n        audioElement.pause();\n        setPlay(false);\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: props.style,\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      ref: fileInputRef,\n      onChange: loadAudio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), loaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: togglePlay,\n        children: play ? 'Pause' : 'Play'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopAudio,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: scrubBarRef,\n        type: \"range\",\n        min: \"0\",\n        max: \"100\",\n        value: loaded ? 0 : 100,\n        id: \"scrub-bar\",\n        disabled: !loaded\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: frequencyRef,\n      id: \"frequency\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: backgroundRef,\n      id: \"background\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AudioVisualizer, \"qpr/Q+q294OWcG8hh6jHxasmYJc=\");\n\n_c = AudioVisualizer;\nexport default AudioVisualizer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioVisualizer\");","map":{"version":3,"sources":["/Users/davidmash/Documents/website/src/Components/AudioVisualizer.js"],"names":["React","useRef","useState","useEffect","AudioVisualizer","props","audioCtx","setAudioCtx","audioElement","setAudioElement","source","setSource","analyser","setAnalyser","bufferLength","setBufferLength","dataArray","setDataArray","loaded","setLoaded","ultimate","setUltimatePeak","fileInputRef","frequencyRef","backgroundRef","scrubBarRef","play","setPlay","loadAudio","pause","currentTime","window","AudioContext","webkitAudioContext","Audio","console","log","addEventListener","updateScrubBar","src","URL","createObjectURL","current","files","value","createMediaElementSource","createAnalyser","connect","destination","frequencyBinCount","Uint8Array","drawVisualization","duration","scrubBarValue","updatePlayback","width","innerWidth","height","innerHeight","requestAnimationFrame","getByteFrequencyData","fillStyle","fillRect","barWidth","barHeight","x","i","r","g","b","stopAudio","togglePlay","paused","style"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\n\nfunction AudioVisualizer(props) {\n    const [audioCtx, setAudioCtx] = useState(null);\n    const [audioElement, setAudioElement] = useState(null);\n    const [source, setSource] = useState(null);\n    const [analyser, setAnalyser] = useState(null);\n    const [bufferLength, setBufferLength] = useState(null);\n    const [dataArray, setDataArray] = useState(null);\n    const [loaded, setLoaded] = useState(false);\n    const [ultimate, setUltimatePeak] = useState(1);\n    const fileInputRef = useRef(null);\n    const frequencyRef = useRef(null);\n    const backgroundRef = useRef(null);\n    const scrubBarRef = useRef(null);\n    const [play, setPlay] = useState(false);\n\n    // Initialize audio context and elements when the file input changes\n    function loadAudio() {\n        if (audioElement) {\n            audioElement.pause();\n            audioElement.currentTime = 0;\n        }\n        setAudioCtx(new (window.AudioContext || window.webkitAudioContext)());\n        setAudioElement(new Audio(), () => {\n            console.log(\"1\");\n            audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n            audioElement.src = URL.createObjectURL(fileInputRef.current.files[0]);\n            audioElement.addEventListener(\"loadeddata\", () => {\n                console.log(\"1\");\n                setLoaded(true);\n                scrubBarRef.value = 0;\n            });\n            audioElement.addEventListener(\"ended\", () => {\n                console.log(\"2\");\n                setPlay(false);\n            });\n            setSource(audioCtx.createMediaElementSource(audioElement), () => {\n                console.log(\"3\");\n                setAnalyser(audioCtx.createAnalyser(), () => {\n                    source.connect(analyser);\n                    analyser.connect(audioCtx.destination);\n                    setBufferLength(analyser.frequencyBinCount);\n                    setDataArray(new Uint8Array(bufferLength));\n                    setUltimatePeak(1);\n                    drawVisualization();\n                });\n            });\n        });\n    }\n\n    function updateScrubBar(){\n        if(audioElement) {\n            let currentTime = audioElement.currentTime;\n            let duration = audioElement.duration;\n            let scrubBarValue = (currentTime/duration)*100;\n            scrubBarRef.value = scrubBarValue;\n        }\n    }\n\n    function updatePlayback() {\n        if(audioElement) {\n            let scrubBarValue = scrubBarRef.value;\n            let currentTime = (scrubBarValue / 100) * audioElement.duration;\n            audioElement.currentTime = currentTime;\n        }\n    }\n\n    useEffect(() => {\n        //update sizes\n        backgroundRef.current.width = window.innerWidth;\n        backgroundRef.current.height = window.innerHeight;\n        frequencyRef.current.width = window.innerWidth;\n        frequencyRef.current.height = window.innerHeight;\n\n        window.addEventListener(\"resize\", () => {\n            backgroundRef.current.width = window.innerWidth;\n            backgroundRef.current.height = window.innerHeight;\n            frequencyRef.current.width = window.innerWidth;\n            frequencyRef.current.height = window.innerHeight;\n        });\n    }, []);\n\n    function drawVisualization() {\n        requestAnimationFrame(drawVisualization);\n        analyser.getByteFrequencyData(dataArray);\n\n        frequencyRef.current.fillStyle = \"rgba(0, 0, 0, 0.1)\";\n        frequencyRef.current.fillRect(0, 0, frequencyRef.current.width, frequencyRef.current.height);\n\n        let barWidth = (frequencyRef.current.width / bufferLength) * 2.5;\n        let barHeight;\n        let x = 0;\n\n        for (let i = 0; i < bufferLength; i++) {\n            barHeight = dataArray[i];\n            let r = barHeight + (25 * (i/bufferLength));\n            let g = 250 * (i/bufferLength);\n            let b = 50;\n            frequencyRef.current.fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n            frequencyRef.current.fillRect(x, frequencyRef.current.height - barHeight / 2, barWidth, barHeight / 2);\n            x += barWidth + 1;\n        }\n    }\n\n    function stopAudio() {\n        if (audioElement) {\n        audioElement.pause();\n        audioElement.currentTime = 0;\n        setPlay(false);\n        }\n    }\n\n    function togglePlay() {\n        if (audioElement) {\n        if (audioElement.paused) {\n            audioElement.play();\n            setPlay(true);\n        } else {\n            audioElement.pause();\n            setPlay(false);\n        }\n        }\n    }\n\n    return (\n        <div style={props.style}>\n            <br />\n            <br />\n            <input type=\"file\" ref={fileInputRef} onChange={loadAudio} />\n            {loaded?\n            <div className=\"control-panel\">\n                <button onClick={togglePlay}>{play ? 'Pause' : 'Play'}</button>\n                <button onClick={stopAudio}>Stop</button>\n                <input ref={scrubBarRef} type=\"range\" min=\"0\" max=\"100\" value={loaded ? 0 : 100} id=\"scrub-bar\" disabled={!loaded} />\n            </div>\n            :\n            <></>\n            }\n            <br />\n            <canvas ref={frequencyRef} id=\"frequency\" />\n            <canvas ref={backgroundRef} id=\"background\" />\n        </div>\n    );\n}\n\nexport default AudioVisualizer;\n"]},"metadata":{},"sourceType":"module"}