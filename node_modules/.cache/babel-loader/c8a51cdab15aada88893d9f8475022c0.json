{"ast":null,"code":"var _jsxFileName = \"/Users/davidmash/Documents/website/src/Components/AudioVisualizer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AudioVisualizer() {\n  _s();\n\n  const [audioCtx, setAudioCtx] = useState(null);\n  const [audioElement, setAudioElement] = useState(null);\n  const [source, setSource] = useState(null);\n  const [analyser, setAnalyser] = useState(null);\n  const [bufferLength, setBufferLength] = useState(null);\n  const [dataArray, setDataArray] = useState(null);\n  const [loaded, setLoaded] = useState(false);\n  const [ultimate, setUltimatePeak] = useState(1);\n  const fileInputRef = useRef(null);\n  const frequencyRef = useRef(null);\n  const backgroundRef = useRef(null);\n  const [play, setPlay] = useState(false);\n  useEffect(() => {\n    // Initialize audio context and elements when the file input changes\n    function loadAudio() {\n      if (audioElement) {\n        audioElement.pause();\n        audioElement.currentTime = 0;\n        togglePlay.innerHTML = \"Play\";\n      }\n\n      setAudioCtx(new (window.AudioContext || window.webkitAudioContext)());\n      setAudioElement(new Audio());\n      audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n      audioElement.src = URL.createObjectURL(fileInputRef.current.files[0]);\n      audioElement.addEventListener(\"loadeddata\", () => {\n        setLoaded(true);\n        scrubBar.value = 0;\n      });\n      audioElement.addEventListener(\"ended\", () => {\n        setPlay(false);\n      });\n      setSource(audioCtx.createMediaElementSource(audioElement));\n      setAnalyser(audioCtx.createAnalyser());\n      source.connect(analyser);\n      analyser.connect(audioCtx.destination);\n      setBufferLength(analyser.frequencyBinCount);\n      setDataArray(new Uint8Array(bufferLength));\n      setUltimatePeak(1);\n      drawVisualization();\n    } //scrub bar\n\n\n    let scrubBar = document.getElementById(\"scrub-bar\");\n    scrubBar.addEventListener(\"input\", updatePlayback);\n\n    function updatePlayback() {\n      if (audioElement) {\n        let scrubBarValue = scrubBar.value;\n        let currentTime = scrubBarValue / 100 * audioElement.duration;\n        audioElement.currentTime = currentTime;\n      }\n    }\n\n    function updateScrubBar() {\n      if (audioElement) {\n        let currentTime = audioElement.currentTime;\n        let duration = audioElement.duration;\n        let scrubBarValue = currentTime / duration * 100;\n        scrubBar.value = scrubBarValue;\n      }\n    } //background effect canvas\n\n\n    let smudgeCtx = backgroundRef.current.getContext(\"2d\"); //frequency visualizer canvas\n\n    let frequency = frequencyRef.current.getContext(\"2d\"); //update sizes\n\n    backgroundRef.current.width = window.innerWidth;\n    backgroundRef.current.height = window.innerHeight;\n    frequencyRef.current.width = window.innerWidth;\n    frequencyRef.current.height = window.innerHeight;\n    window.addEventListener(\"resize\", () => {\n      backgroundRef.current.width = window.innerWidth;\n      backgroundRef.current.height = window.innerHeight;\n      frequencyRef.current.width = window.innerWidth;\n      frequencyRef.current.height = window.innerHeight;\n    });\n  }, []);\n\n  function drawVisualization() {\n    requestAnimationFrame(drawVisualization);\n    analyser.getByteFrequencyData(dataArray);\n    frequency.fillStyle = \"rgba(0, 0, 0, 0.1)\";\n    frequency.fillRect(0, 0, frequencyRef.current.width, frequencyRef.current.height);\n    let barWidth = frequencyRef.current.width / bufferLength * 2.5;\n    let barHeight;\n    let x = 0;\n\n    for (let i = 0; i < bufferLength; i++) {\n      barHeight = dataArray[i];\n      let r = barHeight + 25 * (i / bufferLength);\n      let g = 250 * (i / bufferLength);\n      let b = 50;\n      frequency.fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n      frequency.fillRect(x, frequencyRef.current.height - barHeight / 2, barWidth, barHeight / 2);\n      x += barWidth + 1;\n    }\n  }\n\n  function stopAudio() {\n    if (audioElement) {\n      audioElement.pause();\n      audioElement.currentTime = 0;\n      setPlay(false);\n    }\n  }\n\n  function togglePlay() {\n    if (audioElement) {\n      if (audioElement.paused) {\n        audioElement.play();\n        setPlay(true);\n      } else {\n        audioElement.pause();\n        setPlay(false);\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      ref: fileInputRef,\n      onChange: loadAudio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: frequencyRef,\n      id: \"frequency\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: backgroundRef,\n      id: \"background\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: togglePlay,\n        children: play ? 'Pause' : 'Play'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopAudio,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"0\",\n        max: \"100\",\n        value: loaded ? 0 : 100,\n        id: \"scrub-bar\",\n        disabled: !loaded\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AudioVisualizer, \"WQZ4lyvW0aR7nxOla05fXnzD2hM=\");\n\n_c = AudioVisualizer;\nexport default AudioVisualizer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioVisualizer\");","map":{"version":3,"sources":["/Users/davidmash/Documents/website/src/Components/AudioVisualizer.js"],"names":["React","useRef","useState","useEffect","AudioVisualizer","audioCtx","setAudioCtx","audioElement","setAudioElement","source","setSource","analyser","setAnalyser","bufferLength","setBufferLength","dataArray","setDataArray","loaded","setLoaded","ultimate","setUltimatePeak","fileInputRef","frequencyRef","backgroundRef","play","setPlay","loadAudio","pause","currentTime","togglePlay","innerHTML","window","AudioContext","webkitAudioContext","Audio","addEventListener","updateScrubBar","src","URL","createObjectURL","current","files","scrubBar","value","createMediaElementSource","createAnalyser","connect","destination","frequencyBinCount","Uint8Array","drawVisualization","document","getElementById","updatePlayback","scrubBarValue","duration","smudgeCtx","getContext","frequency","width","innerWidth","height","innerHeight","requestAnimationFrame","getByteFrequencyData","fillStyle","fillRect","barWidth","barHeight","x","i","r","g","b","stopAudio","paused"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\n\nfunction AudioVisualizer() {\n    const [audioCtx, setAudioCtx] = useState(null);\n    const [audioElement, setAudioElement] = useState(null);\n    const [source, setSource] = useState(null);\n    const [analyser, setAnalyser] = useState(null);\n    const [bufferLength, setBufferLength] = useState(null);\n    const [dataArray, setDataArray] = useState(null);\n    const [loaded, setLoaded] = useState(false);\n    const [ultimate, setUltimatePeak] = useState(1);\n    const fileInputRef = useRef(null);\n    const frequencyRef = useRef(null);\n    const backgroundRef = useRef(null);\n    const [play, setPlay] = useState(false);\n\n    useEffect(() => {\n        // Initialize audio context and elements when the file input changes\n        function loadAudio() {\n        if (audioElement) {\n            audioElement.pause();\n            audioElement.currentTime = 0;\n            togglePlay.innerHTML = \"Play\";\n        }\n        setAudioCtx(new (window.AudioContext || window.webkitAudioContext)());\n        setAudioElement(new Audio());\n        audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n        audioElement.src = URL.createObjectURL(fileInputRef.current.files[0]);\n        audioElement.addEventListener(\"loadeddata\", () => {\n            setLoaded(true);\n            scrubBar.value = 0;\n        });\n        audioElement.addEventListener(\"ended\", () => {\n            setPlay(false);\n        });\n        setSource(audioCtx.createMediaElementSource(audioElement));\n        setAnalyser(audioCtx.createAnalyser());\n        source.connect(analyser);\n        analyser.connect(audioCtx.destination);\n        setBufferLength(analyser.frequencyBinCount);\n        setDataArray(new Uint8Array(bufferLength));\n        setUltimatePeak(1);\n        drawVisualization();\n        }\n\n        //scrub bar\n        let scrubBar = document.getElementById(\"scrub-bar\");\n        scrubBar.addEventListener(\"input\", updatePlayback);\n\n        function updatePlayback() {\n        if(audioElement) {\n            let scrubBarValue = scrubBar.value;\n            let currentTime = (scrubBarValue / 100) * audioElement.duration;\n            audioElement.currentTime = currentTime;\n        }\n        }\n\n        function updateScrubBar(){\n        if(audioElement) {\n            let currentTime = audioElement.currentTime;\n            let duration = audioElement.duration;\n            let scrubBarValue = (currentTime/duration)*100;\n            scrubBar.value = scrubBarValue;\n        }\n        }\n\n        //background effect canvas\n        let smudgeCtx = backgroundRef.current.getContext(\"2d\")\n        //frequency visualizer canvas\n        let frequency = frequencyRef.current.getContext(\"2d\");\n        //update sizes\n        backgroundRef.current.width = window.innerWidth;\n        backgroundRef.current.height = window.innerHeight;\n        frequencyRef.current.width = window.innerWidth;\n        frequencyRef.current.height = window.innerHeight;\n\n        window.addEventListener(\"resize\", () => {\n            backgroundRef.current.width = window.innerWidth;\n            backgroundRef.current.height = window.innerHeight;\n            frequencyRef.current.width = window.innerWidth;\n            frequencyRef.current.height = window.innerHeight;\n        });\n    }, []);\n\n    function drawVisualization() {\n        requestAnimationFrame(drawVisualization);\n        analyser.getByteFrequencyData(dataArray);\n\n        frequency.fillStyle = \"rgba(0, 0, 0, 0.1)\";\n        frequency.fillRect(0, 0, frequencyRef.current.width, frequencyRef.current.height);\n\n        let barWidth = (frequencyRef.current.width / bufferLength) * 2.5;\n        let barHeight;\n        let x = 0;\n\n        for (let i = 0; i < bufferLength; i++) {\n            barHeight = dataArray[i];\n            let r = barHeight + (25 * (i/bufferLength));\n            let g = 250 * (i/bufferLength);\n            let b = 50;\n            frequency.fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n            frequency.fillRect(x, frequencyRef.current.height - barHeight / 2, barWidth, barHeight / 2);\n            x += barWidth + 1;\n        }\n    }\n\n    function stopAudio() {\n        if (audioElement) {\n        audioElement.pause();\n        audioElement.currentTime = 0;\n        setPlay(false);\n        }\n    }\n\n    function togglePlay() {\n        if (audioElement) {\n        if (audioElement.paused) {\n            audioElement.play();\n            setPlay(true);\n        } else {\n            audioElement.pause();\n            setPlay(false);\n        }\n        }\n    }\n\n    return (\n        <div>\n        <input type=\"file\" ref={fileInputRef} onChange={loadAudio} />\n        <br />\n        <canvas ref={frequencyRef} id=\"frequency\" />\n        <canvas ref={backgroundRef} id=\"background\" />\n        <div className=\"control-panel\">\n            <button onClick={togglePlay}>{play ? 'Pause' : 'Play'}</button>\n            <button onClick={stopAudio}>Stop</button>\n            <input type=\"range\" min=\"0\" max=\"100\" value={loaded ? 0 : 100} id=\"scrub-bar\" disabled={!loaded} />\n        </div>\n        </div>\n    );\n}\n\nexport default AudioVisualizer;\n"]},"metadata":{},"sourceType":"module"}