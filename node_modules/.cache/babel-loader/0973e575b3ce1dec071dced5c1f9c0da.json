{"ast":null,"code":"var _jsxFileName = \"/Users/davidmash/Documents/website/src/Components/AudioVisualizer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction AudioVisualizer(props) {\n  _s();\n\n  const [audioCtx, setAudioCtx] = useState(null);\n  const [audioElement, setAudioElement] = useState(null);\n  const [loaded, setLoaded] = useState(false);\n  const fileInputRef = useRef(null);\n  const frequencyRef = useRef(null);\n  const backgroundRef = useRef(null);\n  const scrubBarRef = useRef(null);\n  const [play, setPlay] = useState(false);\n  useEffect(() => {\n    function updateScrubBar() {\n      if (audioElement && scrubBarRef.current) {\n        let currentTime = audioElement.currentTime;\n        let duration = audioElement.duration;\n        let scrubBarValue = currentTime / duration * 100;\n        scrubBarRef.current.value = scrubBarValue;\n      }\n    }\n\n    if (audioElement) {\n      audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n      audioElement.src = URL.createObjectURL(fileInputRef.current.files[0]);\n      audioElement.addEventListener(\"loadeddata\", () => {\n        setLoaded(true);\n      });\n      audioElement.addEventListener(\"ended\", () => {\n        setPlay(false);\n      });\n    }\n  }, [audioElement, audioCtx]);\n  useEffect(() => {\n    if (audioCtx) {\n      const source = audioCtx.createMediaElementSource(audioElement);\n      const analyser = audioCtx.createAnalyser();\n      source.connect(analyser);\n      analyser.connect(audioCtx.destination);\n      const bufferLength = analyser.frequencyBinCount;\n      let dataArray = new Uint8Array(bufferLength);\n      frequencyRef.current.willReadFrequently = true;\n      backgroundRef.current.willReadFrequently = true;\n      const frequencyCtx = frequencyRef.current.getContext(\"2d\");\n      const smudgeCtx = backgroundRef.current.getContext(\"2d\");\n      window.addEventListener(\"resize\", () => {\n        backgroundRef.current.width = window.innerWidth;\n        backgroundRef.current.height = window.innerHeight;\n        frequencyRef.current.width = window.innerWidth;\n        frequencyRef.current.height = window.innerHeight;\n      });\n      let ultimatePeak = 1;\n      let rotationAngle = 0;\n      let rotateSmudge = false;\n      let smudgeVelocity = 0; // Draw the frequency spectrum visualization\n\n      function drawVisualization() {\n        requestAnimationFrame(drawVisualization);\n        analyser.getByteFrequencyData(dataArray); // draw current frame to main canvas\n\n        frequencyCtx.clearRect(0, 0, frequencyCtx.canvas.width, frequencyCtx.canvasheight);\n        let avgAmplitude = 0;\n        let highFreqAvgAmplitude = 0;\n        let midFreqAvgAmplitude = 0;\n        let lowFreqAvgAmplitude = 0;\n        let lowFreqPeakAmplitude = 0;\n\n        if (dataArray && dataArray.length > 0) {\n          let gradient = frequencyCtx.createLinearGradient(0, 0, frequencyCtx.canvas.width, 0);\n          let highFrequencyColor = getHighFrequencyColor(dataArray);\n          gradient.addColorStop(0, highFrequencyColor);\n          gradient.addColorStop(0.5, getLowFrequencyColor(dataArray));\n          gradient.addColorStop(1, highFrequencyColor);\n          frequencyCtx.fillStyle = gradient;\n          let verticalCenter = frequencyCtx.height / 2;\n          let barWidth = 600 / bufferLength * 2.5 / 2;\n          let x = 0;\n\n          for (let i = bufferLength - 1; i > 0; i--) {\n            drawVisualizationBar(i, barWidth, x, verticalCenter);\n            x += (barWidth + 1) / 2;\n          }\n\n          for (let i = 0; i < bufferLength; i++) {\n            drawVisualizationBar(i, barWidth, x, verticalCenter);\n            x += (barWidth + 1) / 2;\n          }\n\n          avgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length);\n          highFreqAvgAmplitude = getAverageAmplitude(dataArray, 12 * dataArray.length / 16, dataArray.length);\n          midFreqAvgAmplitude = getAverageAmplitude(dataArray, dataArray.length / 16, 3 * dataArray.length / 16);\n          lowFreqAvgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length / 16);\n          lowFreqPeakAmplitude = getPeakAmplitude(dataArray, 0, dataArray.length / 16);\n          frequencyCtx.globalAlpha = Math.abs(0.2 - avgAmplitude / 100) + 0.1;\n        } //smudge effect\n\n\n        rotateSmudge = rotateSmudge && !(lowFreqPeakAmplitude > ultimatePeak * 1.01) && midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 1.8 || midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 3.2;\n\n        if (rotateSmudge) {\n          rotationAngle = (rotationAngle + 1) % 360;\n          smudgeVelocity = lowFreqAvgAmplitude / 60 * (midFreqAvgAmplitude < highFreqAvgAmplitude) ? -1 : 1; // Save the current canvas state\n\n          smudgeCtx.save(); // Rotate the canvas\n\n          smudgeCtx.translate(smudgeCtx.canvas.width / 2, smudgeCtx.canvas.height / 2);\n          smudgeCtx.rotate(Math.PI / 180 * rotationAngle * smudgeVelocity);\n          smudgeCtx.translate(-smudgeCtx.canvas.width / 2, -smudgeCtx.canvas.height / 2); // Draw the smudged image on the canvas\n\n          smudgeCtx.globalAlpha = Math.abs(0.5 - avgAmplitude / 100) / 10;\n          smudgeCtx.drawImage(smudgeCtx.canvas, 0, 0); // Restore the canvas state\n\n          smudgeCtx.restore();\n        } else {\n          rotationAngle = 0;\n          var imageDataTop = smudgeCtx.getImageData(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height / 2);\n          var imageDataBottom = smudgeCtx.getImageData(0, smudgeCtx.canvas.height / 2, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n          smudgeCtx.clearRect(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n          smudgeCtx.globalAlpha = 0.5 - avgAmplitude / 100;\n          smudgeVelocity = avgAmplitude < 10 ? avgAmplitude * 2 : (lowFreqPeakAmplitude >= ultimatePeak && lowFreqAvgAmplitude * 0.6 > midFreqAvgAmplitude + highFreqAvgAmplitude ? -1 : 1) * avgAmplitude / 4;\n          smudgeCtx.putImageData(imageDataTop, 0, -smudgeVelocity);\n          smudgeCtx.putImageData(imageDataBottom, 0, smudgeCtx.canvas.height / 2 + smudgeVelocity);\n        }\n\n        smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n      }\n\n      function getAverageAmplitude(data, startIndex, endIndex) {\n        startIndex = Math.trunc(startIndex);\n        endIndex = Math.min(Math.trunc(endIndex), data.length);\n        let sum = 0;\n\n        for (let i = startIndex; i < endIndex; i++) {\n          sum += data[i];\n        }\n\n        return sum / (endIndex - startIndex - 1);\n      }\n\n      function getPeakAmplitude(data, startIndex, endIndex) {\n        startIndex = Math.trunc(startIndex);\n        endIndex = Math.min(Math.trunc(endIndex), data.length);\n        let peak = 0;\n\n        for (let i = startIndex; i < endIndex; i++) {\n          peak = Math.max(peak, data[i]);\n        }\n\n        return peak;\n      }\n\n      function drawVisualizationBar(index, barWidth, x, verticalCenter) {\n        if (dataArray[index] > ultimatePeak) {\n          ultimatePeak = dataArray[index];\n        } //take the square of the data like this will amplify peaks\n\n\n        const adjustedData = 8 * dataArray[index] * Math.pow(dataArray[index] / ultimatePeak, 1.5 * (1 - index / dataArray.length)) * ((index + dataArray.length / 2) / dataArray.length);\n        let barHeight = adjustedData;\n        let offsetX = (Math.random() - 0.5) * adjustedData / 32;\n        let offsetY = (Math.random() - 0.5) * adjustedData / 32;\n        let offsetWidth = (Math.random() - 0.5) * adjustedData / 32;\n        frequencyCtx.fillRect(x + offsetX, verticalCenter - barHeight / 4 + offsetY, barWidth + offsetWidth, barHeight / 2);\n      }\n\n      let lowFreqShiftingColorNumber = 0;\n\n      function getLowFrequencyColor(dataArray) {\n        let lowFrequencySum = 0;\n        let lowFrequencyMax = 0;\n\n        for (let i = 0; i < dataArray.length / 2; i++) {\n          lowFrequencySum += dataArray[i];\n\n          if (dataArray[i] > lowFrequencyMax) {\n            lowFrequencyMax = dataArray[i];\n          }\n        }\n\n        let lowFrequencyAverage = lowFrequencySum / (dataArray.length / 2);\n\n        if (lowFrequencyMax > lowFrequencyAverage * 10 || lowFrequencyAverage > ultimatePeak / 2) {\n          lowFreqShiftingColorNumber = (lowFreqShiftingColorNumber + lowFrequencyMax / (lowFrequencyAverage * 20) + lowFrequencyAverage / ultimatePeak) % 255;\n        }\n\n        return `hsl(${map(lowFrequencyAverage, lowFreqShiftingColorNumber, 255, lowFreqShiftingColorNumber / 4, 360)}, 100%, 50%)`;\n      }\n\n      let highFreqShiftingColorNumber = 0;\n\n      function getHighFrequencyColor(dataArray) {\n        let highFrequencySum = 0;\n        let highFrequencyMax = 0;\n\n        for (let i = dataArray.length / 2; i < dataArray.length; i++) {\n          highFrequencySum += dataArray[i];\n\n          if (dataArray[i] > highFrequencyMax) {\n            highFrequencyMax = dataArray[i];\n          }\n        }\n\n        let highFrequencyAverage = highFrequencySum / (dataArray.length / 2);\n\n        if (highFrequencyMax > highFrequencyAverage * 200 || highFrequencyAverage > ultimatePeak / 2) {\n          highFreqShiftingColorNumber = (highFreqShiftingColorNumber + highFrequencyMax / (highFrequencyAverage * 200) + highFrequencyAverage / ultimatePeak) % 255;\n        }\n\n        return `hsl(${map(highFrequencyAverage, highFreqShiftingColorNumber, 255, highFrequencyAverage / 4, 360)}, 100%, 50%)`;\n      }\n\n      function map(value, start1, stop1, start2, stop2) {\n        return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n      }\n\n      drawVisualization();\n    }\n  }, [audioCtx, frequencyCtx, smudgeCtx]); // Initialize audio context and elements when the file input changes\n\n  function loadAudio() {\n    if (audioElement) {\n      audioElement.pause();\n      audioElement.currentTime = 0;\n    }\n\n    setAudioCtx(new (window.AudioContext || window.webkitAudioContext)());\n    setAudioElement(new Audio());\n  }\n\n  function updatePlayback() {\n    if (audioElement && scrubBarRef.current) {\n      let scrubBarValue = scrubBarRef.current.value;\n      let currentTime = scrubBarValue / 100 * audioElement.duration;\n      audioElement.currentTime = currentTime;\n    }\n  }\n\n  function stopAudio() {\n    if (audioElement) {\n      audioElement.pause();\n      audioElement.currentTime = 0;\n      setPlay(false);\n    }\n  }\n\n  function togglePlay() {\n    if (audioElement) {\n      if (audioElement.paused) {\n        audioElement.play();\n        setPlay(true);\n      } else {\n        audioElement.pause();\n        setPlay(false);\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: props.style,\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      ref: fileInputRef,\n      onChange: loadAudio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }, this), loaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: togglePlay,\n        children: play ? 'Pause' : 'Play'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopAudio,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: scrubBarRef,\n        type: \"range\",\n        min: \"0\",\n        max: \"100\",\n        defaultValue: 0,\n        id: \"scrub-bar\",\n        disabled: !loaded,\n        onChange: updatePlayback()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: frequencyRef,\n      id: \"frequency\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: backgroundRef,\n      id: \"background\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AudioVisualizer, \"KWtKNP4GQMnWplOSRwh/KcnbJ4Q=\");\n\n_c = AudioVisualizer;\nexport default AudioVisualizer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioVisualizer\");","map":{"version":3,"sources":["/Users/davidmash/Documents/website/src/Components/AudioVisualizer.js"],"names":["React","useRef","useState","useEffect","AudioVisualizer","props","audioCtx","setAudioCtx","audioElement","setAudioElement","loaded","setLoaded","fileInputRef","frequencyRef","backgroundRef","scrubBarRef","play","setPlay","updateScrubBar","current","currentTime","duration","scrubBarValue","value","addEventListener","src","URL","createObjectURL","files","source","createMediaElementSource","analyser","createAnalyser","connect","destination","bufferLength","frequencyBinCount","dataArray","Uint8Array","willReadFrequently","frequencyCtx","getContext","smudgeCtx","window","width","innerWidth","height","innerHeight","ultimatePeak","rotationAngle","rotateSmudge","smudgeVelocity","drawVisualization","requestAnimationFrame","getByteFrequencyData","clearRect","canvas","canvasheight","avgAmplitude","highFreqAvgAmplitude","midFreqAvgAmplitude","lowFreqAvgAmplitude","lowFreqPeakAmplitude","length","gradient","createLinearGradient","highFrequencyColor","getHighFrequencyColor","addColorStop","getLowFrequencyColor","fillStyle","verticalCenter","barWidth","x","i","drawVisualizationBar","getAverageAmplitude","getPeakAmplitude","globalAlpha","Math","abs","save","translate","rotate","PI","drawImage","restore","imageDataTop","getImageData","imageDataBottom","putImageData","data","startIndex","endIndex","trunc","min","sum","peak","max","index","adjustedData","pow","barHeight","offsetX","random","offsetY","offsetWidth","fillRect","lowFreqShiftingColorNumber","lowFrequencySum","lowFrequencyMax","lowFrequencyAverage","map","highFreqShiftingColorNumber","highFrequencySum","highFrequencyMax","highFrequencyAverage","start1","stop1","start2","stop2","loadAudio","pause","AudioContext","webkitAudioContext","Audio","updatePlayback","stopAudio","togglePlay","paused","style"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;;;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAC5B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,KAAD,CAApC;AACA,QAAMU,YAAY,GAAGX,MAAM,CAAC,IAAD,CAA3B;AACA,QAAMY,YAAY,GAAGZ,MAAM,CAAC,IAAD,CAA3B;AACA,QAAMa,aAAa,GAAGb,MAAM,CAAC,IAAD,CAA5B;AACA,QAAMc,WAAW,GAAGd,MAAM,CAAC,IAAD,CAA1B;AACA,QAAM,CAACe,IAAD,EAAOC,OAAP,IAAkBf,QAAQ,CAAC,KAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,aAASe,cAAT,GAA0B;AACtB,UAAGV,YAAY,IAAIO,WAAW,CAACI,OAA/B,EAAwC;AACpC,YAAIC,WAAW,GAAGZ,YAAY,CAACY,WAA/B;AACA,YAAIC,QAAQ,GAAGb,YAAY,CAACa,QAA5B;AACA,YAAIC,aAAa,GAAIF,WAAW,GAACC,QAAb,GAAuB,GAA3C;AACAN,QAAAA,WAAW,CAACI,OAAZ,CAAoBI,KAApB,GAA4BD,aAA5B;AACH;AACJ;;AACD,QAAId,YAAJ,EAAkB;AAChBA,MAAAA,YAAY,CAACgB,gBAAb,CAA8B,YAA9B,EAA4CN,cAA5C;AACAV,MAAAA,YAAY,CAACiB,GAAb,GAAmBC,GAAG,CAACC,eAAJ,CAAoBf,YAAY,CAACO,OAAb,CAAqBS,KAArB,CAA2B,CAA3B,CAApB,CAAnB;AACApB,MAAAA,YAAY,CAACgB,gBAAb,CAA8B,YAA9B,EAA4C,MAAM;AAChDb,QAAAA,SAAS,CAAC,IAAD,CAAT;AACD,OAFD;AAGAH,MAAAA,YAAY,CAACgB,gBAAb,CAA8B,OAA9B,EAAuC,MAAM;AAC3CP,QAAAA,OAAO,CAAC,KAAD,CAAP;AACD,OAFD;AAGD;AACJ,GAnBQ,EAmBN,CAACT,YAAD,EAAeF,QAAf,CAnBM,CAAT;AAqBAH,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIG,QAAJ,EAAc;AACV,YAAMuB,MAAM,GAAGvB,QAAQ,CAACwB,wBAAT,CAAkCtB,YAAlC,CAAf;AACA,YAAMuB,QAAQ,GAAGzB,QAAQ,CAAC0B,cAAT,EAAjB;AACAH,MAAAA,MAAM,CAACI,OAAP,CAAeF,QAAf;AACAA,MAAAA,QAAQ,CAACE,OAAT,CAAiB3B,QAAQ,CAAC4B,WAA1B;AACA,YAAMC,YAAY,GAAGJ,QAAQ,CAACK,iBAA9B;AACA,UAAIC,SAAS,GAAG,IAAIC,UAAJ,CAAeH,YAAf,CAAhB;AAGAtB,MAAAA,YAAY,CAACM,OAAb,CAAqBoB,kBAArB,GAA0C,IAA1C;AACAzB,MAAAA,aAAa,CAACK,OAAd,CAAsBoB,kBAAtB,GAA2C,IAA3C;AACA,YAAMC,YAAY,GAAG3B,YAAY,CAACM,OAAb,CAAqBsB,UAArB,CAAgC,IAAhC,CAArB;AACA,YAAMC,SAAS,GAAG5B,aAAa,CAACK,OAAd,CAAsBsB,UAAtB,CAAiC,IAAjC,CAAlB;AAEAE,MAAAA,MAAM,CAACnB,gBAAP,CAAwB,QAAxB,EAAkC,MAAM;AACpCV,QAAAA,aAAa,CAACK,OAAd,CAAsByB,KAAtB,GAA8BD,MAAM,CAACE,UAArC;AACA/B,QAAAA,aAAa,CAACK,OAAd,CAAsB2B,MAAtB,GAA+BH,MAAM,CAACI,WAAtC;AACAlC,QAAAA,YAAY,CAACM,OAAb,CAAqByB,KAArB,GAA6BD,MAAM,CAACE,UAApC;AACAhC,QAAAA,YAAY,CAACM,OAAb,CAAqB2B,MAArB,GAA8BH,MAAM,CAACI,WAArC;AACH,OALD;AAOA,UAAIC,YAAY,GAAG,CAAnB;AACA,UAAIC,aAAa,GAAG,CAApB;AACA,UAAIC,YAAY,GAAG,KAAnB;AACA,UAAIC,cAAc,GAAG,CAArB,CAxBU,CAyBV;;AACA,eAASC,iBAAT,GAA6B;AACzBC,QAAAA,qBAAqB,CAACD,iBAAD,CAArB;AACArB,QAAAA,QAAQ,CAACuB,oBAAT,CAA8BjB,SAA9B,EAFyB,CAIzB;;AACAG,QAAAA,YAAY,CAACe,SAAb,CAAuB,CAAvB,EAA0B,CAA1B,EAA6Bf,YAAY,CAACgB,MAAb,CAAoBZ,KAAjD,EAAwDJ,YAAY,CAACiB,YAArE;AAEA,YAAIC,YAAY,GAAG,CAAnB;AACA,YAAIC,oBAAoB,GAAG,CAA3B;AACA,YAAIC,mBAAmB,GAAG,CAA1B;AACA,YAAIC,mBAAmB,GAAG,CAA1B;AACA,YAAIC,oBAAoB,GAAG,CAA3B;;AACA,YAAIzB,SAAS,IAAIA,SAAS,CAAC0B,MAAV,GAAmB,CAApC,EAAuC;AACnC,cAAIC,QAAQ,GAAGxB,YAAY,CAACyB,oBAAb,CAAkC,CAAlC,EAAqC,CAArC,EAAwCzB,YAAY,CAACgB,MAAb,CAAoBZ,KAA5D,EAAmE,CAAnE,CAAf;AACA,cAAIsB,kBAAkB,GAAGC,qBAAqB,CAAC9B,SAAD,CAA9C;AACA2B,UAAAA,QAAQ,CAACI,YAAT,CAAsB,CAAtB,EAAyBF,kBAAzB;AACAF,UAAAA,QAAQ,CAACI,YAAT,CAAsB,GAAtB,EAA2BC,oBAAoB,CAAChC,SAAD,CAA/C;AACA2B,UAAAA,QAAQ,CAACI,YAAT,CAAsB,CAAtB,EAAyBF,kBAAzB;AACA1B,UAAAA,YAAY,CAAC8B,SAAb,GAAyBN,QAAzB;AACA,cAAIO,cAAc,GAAG/B,YAAY,CAACM,MAAb,GAAsB,CAA3C;AACA,cAAI0B,QAAQ,GAAI,MAAMrC,YAAP,GAAuB,GAAvB,GAA6B,CAA5C;AACA,cAAIsC,CAAC,GAAG,CAAR;;AACA,eAAK,IAAIC,CAAC,GAAGvC,YAAY,GAAG,CAA5B,EAA+BuC,CAAC,GAAG,CAAnC,EAAuCA,CAAC,EAAxC,EAA4C;AACxCC,YAAAA,oBAAoB,CAACD,CAAD,EAAIF,QAAJ,EAAcC,CAAd,EAAiBF,cAAjB,CAApB;AACAE,YAAAA,CAAC,IAAI,CAACD,QAAQ,GAAG,CAAZ,IAAiB,CAAtB;AACH;;AACD,eAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvC,YAApB,EAAkCuC,CAAC,EAAnC,EAAuC;AACnCC,YAAAA,oBAAoB,CAACD,CAAD,EAAIF,QAAJ,EAAcC,CAAd,EAAiBF,cAAjB,CAApB;AACAE,YAAAA,CAAC,IAAI,CAACD,QAAQ,GAAG,CAAZ,IAAiB,CAAtB;AACH;;AACDd,UAAAA,YAAY,GAAGkB,mBAAmB,CAACvC,SAAD,EAAY,CAAZ,EAAeA,SAAS,CAAC0B,MAAzB,CAAlC;AACAJ,UAAAA,oBAAoB,GAAGiB,mBAAmB,CAACvC,SAAD,EAAY,KAAKA,SAAS,CAAC0B,MAAf,GAAwB,EAApC,EAAwC1B,SAAS,CAAC0B,MAAlD,CAA1C;AACAH,UAAAA,mBAAmB,GAAGgB,mBAAmB,CAACvC,SAAD,EAAYA,SAAS,CAAC0B,MAAV,GAAmB,EAA/B,EAAmC,IAAI1B,SAAS,CAAC0B,MAAd,GAAuB,EAA1D,CAAzC;AACAF,UAAAA,mBAAmB,GAAGe,mBAAmB,CAACvC,SAAD,EAAY,CAAZ,EAAeA,SAAS,CAAC0B,MAAV,GAAmB,EAAlC,CAAzC;AACAD,UAAAA,oBAAoB,GAAGe,gBAAgB,CAACxC,SAAD,EAAY,CAAZ,EAAeA,SAAS,CAAC0B,MAAV,GAAmB,EAAlC,CAAvC;AACAvB,UAAAA,YAAY,CAACsC,WAAb,GAA2BC,IAAI,CAACC,GAAL,CAAS,MAAOtB,YAAY,GAAG,GAA/B,IAAuC,GAAlE;AACH,SApCwB,CAsCzB;;;AACAR,QAAAA,YAAY,GAAIA,YAAY,IAAI,EAAEY,oBAAoB,GAAGd,YAAY,GAAG,IAAxC,CAAhB,IAAiEY,mBAAmB,GAAGD,oBAAtB,GAA6CD,YAAY,GAAG,GAA9H,IAAsIE,mBAAmB,GAAGD,oBAAtB,GAA6CD,YAAY,GAAG,GAAjN;;AACA,YAAIR,YAAJ,EAAkB;AACdD,UAAAA,aAAa,GAAG,CAACA,aAAa,GAAG,CAAjB,IAAsB,GAAtC;AACAE,UAAAA,cAAc,GAAIU,mBAAD,GAAwB,EAAxB,IAA8BD,mBAAmB,GAAGD,oBAApD,IAA2E,CAAC,CAA5E,GAA+E,CAAhG,CAFc,CAGd;;AACAjB,UAAAA,SAAS,CAACuC,IAAV,GAJc,CAKd;;AACAvC,UAAAA,SAAS,CAACwC,SAAV,CAAoBxC,SAAS,CAACc,MAAV,CAAiBZ,KAAjB,GAAyB,CAA7C,EAAgDF,SAAS,CAACc,MAAV,CAAiBV,MAAjB,GAA0B,CAA1E;AACAJ,UAAAA,SAAS,CAACyC,MAAV,CAAiBJ,IAAI,CAACK,EAAL,GAAU,GAAV,GAAgBnC,aAAhB,GAAgCE,cAAjD;AACAT,UAAAA,SAAS,CAACwC,SAAV,CAAoB,CAACxC,SAAS,CAACc,MAAV,CAAiBZ,KAAlB,GAA0B,CAA9C,EAAiD,CAACF,SAAS,CAACc,MAAV,CAAiBV,MAAlB,GAA2B,CAA5E,EARc,CASd;;AACAJ,UAAAA,SAAS,CAACoC,WAAV,GAAwBC,IAAI,CAACC,GAAL,CAAS,MAAOtB,YAAY,GAAG,GAA/B,IAAuC,EAA/D;AACAhB,UAAAA,SAAS,CAAC2C,SAAV,CAAoB3C,SAAS,CAACc,MAA9B,EAAsC,CAAtC,EAAyC,CAAzC,EAXc,CAYd;;AACAd,UAAAA,SAAS,CAAC4C,OAAV;AACH,SAdD,MAcO;AACHrC,UAAAA,aAAa,GAAG,CAAhB;AACA,cAAIsC,YAAY,GAAG7C,SAAS,CAAC8C,YAAV,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B9C,SAAS,CAACc,MAAV,CAAiBZ,KAA9C,EAAqDF,SAAS,CAACc,MAAV,CAAiBV,MAAjB,GAA0B,CAA/E,CAAnB;AACA,cAAI2C,eAAe,GAAG/C,SAAS,CAAC8C,YAAV,CAAuB,CAAvB,EAA0B9C,SAAS,CAACc,MAAV,CAAiBV,MAAjB,GAA0B,CAApD,EAAuDJ,SAAS,CAACc,MAAV,CAAiBZ,KAAxE,EAA+EF,SAAS,CAACc,MAAV,CAAiBV,MAAhG,CAAtB;AACAJ,UAAAA,SAAS,CAACa,SAAV,CAAoB,CAApB,EAAuB,CAAvB,EAA0Bb,SAAS,CAACc,MAAV,CAAiBZ,KAA3C,EAAkDF,SAAS,CAACc,MAAV,CAAiBV,MAAnE;AACAJ,UAAAA,SAAS,CAACoC,WAAV,GAAwB,MAAOpB,YAAY,GAAG,GAA9C;AACAP,UAAAA,cAAc,GAAIO,YAAY,GAAG,EAAhB,GAAqBA,YAAY,GAAG,CAApC,GAAuC,CAAEI,oBAAoB,IAAId,YAAxB,IAAwCa,mBAAmB,GAAG,GAAtB,GAA4BD,mBAAmB,GAAGD,oBAA3F,GAAkH,CAAC,CAAnH,GAAsH,CAAvH,IAA4HD,YAA5H,GAA2I,CAAnM;AACAhB,UAAAA,SAAS,CAACgD,YAAV,CAAuBH,YAAvB,EAAqC,CAArC,EAAwC,CAACpC,cAAzC;AACAT,UAAAA,SAAS,CAACgD,YAAV,CAAuBD,eAAvB,EAAwC,CAAxC,EAA2C/C,SAAS,CAACc,MAAV,CAAiBV,MAAjB,GAA0B,CAA1B,GAA8BK,cAAzE;AACH;;AACDT,QAAAA,SAAS,CAAC2C,SAAV,CAAoB7C,YAAY,CAACgB,MAAjC,EAAyC,CAAzC,EAA4C,CAA5C;AACH;;AAED,eAASoB,mBAAT,CAA6Be,IAA7B,EAAmCC,UAAnC,EAA+CC,QAA/C,EAAyD;AACrDD,QAAAA,UAAU,GAAGb,IAAI,CAACe,KAAL,CAAWF,UAAX,CAAb;AACAC,QAAAA,QAAQ,GAAGd,IAAI,CAACgB,GAAL,CAAShB,IAAI,CAACe,KAAL,CAAWD,QAAX,CAAT,EAA+BF,IAAI,CAAC5B,MAApC,CAAX;AACA,YAAIiC,GAAG,GAAG,CAAV;;AACA,aAAK,IAAItB,CAAC,GAAGkB,UAAb,EAAyBlB,CAAC,GAAGmB,QAA7B,EAAuCnB,CAAC,EAAxC,EAA4C;AACxCsB,UAAAA,GAAG,IAAIL,IAAI,CAACjB,CAAD,CAAX;AACH;;AACD,eAAOsB,GAAG,IAAIH,QAAQ,GAAGD,UAAX,GAAwB,CAA5B,CAAV;AACH;;AAED,eAASf,gBAAT,CAA0Bc,IAA1B,EAAgCC,UAAhC,EAA4CC,QAA5C,EAAsD;AAClDD,QAAAA,UAAU,GAAGb,IAAI,CAACe,KAAL,CAAWF,UAAX,CAAb;AACAC,QAAAA,QAAQ,GAAGd,IAAI,CAACgB,GAAL,CAAShB,IAAI,CAACe,KAAL,CAAWD,QAAX,CAAT,EAA+BF,IAAI,CAAC5B,MAApC,CAAX;AACA,YAAIkC,IAAI,GAAG,CAAX;;AACA,aAAK,IAAIvB,CAAC,GAAGkB,UAAb,EAAyBlB,CAAC,GAAGmB,QAA7B,EAAuCnB,CAAC,EAAxC,EAA4C;AACxCuB,UAAAA,IAAI,GAAGlB,IAAI,CAACmB,GAAL,CAASD,IAAT,EAAeN,IAAI,CAACjB,CAAD,CAAnB,CAAP;AACH;;AACD,eAAOuB,IAAP;AACH;;AAED,eAAStB,oBAAT,CAA8BwB,KAA9B,EAAqC3B,QAArC,EAA+CC,CAA/C,EAAkDF,cAAlD,EAAkE;AAC9D,YAAIlC,SAAS,CAAC8D,KAAD,CAAT,GAAmBnD,YAAvB,EAAqC;AACjCA,UAAAA,YAAY,GAAGX,SAAS,CAAC8D,KAAD,CAAxB;AACH,SAH6D,CAI9D;;;AACA,cAAMC,YAAY,GAAG,IAAI/D,SAAS,CAAC8D,KAAD,CAAb,GAAuBpB,IAAI,CAACsB,GAAL,CAAShE,SAAS,CAAC8D,KAAD,CAAT,GAAmBnD,YAA5B,EAA0C,OAAO,IAAKmD,KAAK,GAAG9D,SAAS,CAAC0B,MAA9B,CAA1C,CAAvB,IAA4G,CAACoC,KAAK,GAAI9D,SAAS,CAAC0B,MAAV,GAAmB,CAA7B,IAAmC1B,SAAS,CAAC0B,MAAzJ,CAArB;AACA,YAAIuC,SAAS,GAAGF,YAAhB;AACA,YAAIG,OAAO,GAAG,CAACxB,IAAI,CAACyB,MAAL,KAAgB,GAAjB,IAAwBJ,YAAxB,GAAuC,EAArD;AACA,YAAIK,OAAO,GAAG,CAAC1B,IAAI,CAACyB,MAAL,KAAgB,GAAjB,IAAwBJ,YAAxB,GAAuC,EAArD;AACA,YAAIM,WAAW,GAAG,CAAC3B,IAAI,CAACyB,MAAL,KAAgB,GAAjB,IAAwBJ,YAAxB,GAAuC,EAAzD;AACA5D,QAAAA,YAAY,CAACmE,QAAb,CAAsBlC,CAAC,GAAG8B,OAA1B,EAAmChC,cAAc,GAAI+B,SAAS,GAAG,CAA9B,GAAmCG,OAAtE,EAA+EjC,QAAQ,GAAGkC,WAA1F,EAAuGJ,SAAS,GAAG,CAAnH;AACH;;AAED,UAAIM,0BAA0B,GAAG,CAAjC;;AACA,eAASvC,oBAAT,CAA8BhC,SAA9B,EAAyC;AACrC,YAAIwE,eAAe,GAAG,CAAtB;AACA,YAAIC,eAAe,GAAG,CAAtB;;AACA,aAAK,IAAIpC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrC,SAAS,CAAC0B,MAAV,GAAmB,CAAvC,EAA0CW,CAAC,EAA3C,EAA+C;AAC3CmC,UAAAA,eAAe,IAAIxE,SAAS,CAACqC,CAAD,CAA5B;;AACA,cAAIrC,SAAS,CAACqC,CAAD,CAAT,GAAeoC,eAAnB,EAAoC;AAChCA,YAAAA,eAAe,GAAGzE,SAAS,CAACqC,CAAD,CAA3B;AACH;AACJ;;AACD,YAAIqC,mBAAmB,GAAGF,eAAe,IAAIxE,SAAS,CAAC0B,MAAV,GAAmB,CAAvB,CAAzC;;AACA,YAAI+C,eAAe,GAAGC,mBAAmB,GAAG,EAAxC,IAA8CA,mBAAmB,GAAG/D,YAAY,GAAG,CAAvF,EAA0F;AACtF4D,UAAAA,0BAA0B,GAAG,CAACA,0BAA0B,GAAIE,eAAe,IAAIC,mBAAmB,GAAG,EAA1B,CAA7C,GAA+EA,mBAAmB,GAAG/D,YAAtG,IAAuH,GAApJ;AACH;;AACD,eAAQ,OAAMgE,GAAG,CAACD,mBAAD,EAAsBH,0BAAtB,EAAkD,GAAlD,EAAuDA,0BAA0B,GAAG,CAApF,EAAuF,GAAvF,CAA4F,cAA7G;AACH;;AAED,UAAIK,2BAA2B,GAAG,CAAlC;;AACA,eAAS9C,qBAAT,CAA+B9B,SAA/B,EAA0C;AACtC,YAAI6E,gBAAgB,GAAG,CAAvB;AACA,YAAIC,gBAAgB,GAAG,CAAvB;;AACA,aAAK,IAAIzC,CAAC,GAAGrC,SAAS,CAAC0B,MAAV,GAAmB,CAAhC,EAAmCW,CAAC,GAAGrC,SAAS,CAAC0B,MAAjD,EAAyDW,CAAC,EAA1D,EAA8D;AAC1DwC,UAAAA,gBAAgB,IAAI7E,SAAS,CAACqC,CAAD,CAA7B;;AACA,cAAIrC,SAAS,CAACqC,CAAD,CAAT,GAAeyC,gBAAnB,EAAqC;AACjCA,YAAAA,gBAAgB,GAAG9E,SAAS,CAACqC,CAAD,CAA5B;AACH;AACJ;;AACD,YAAI0C,oBAAoB,GAAGF,gBAAgB,IAAI7E,SAAS,CAAC0B,MAAV,GAAkB,CAAtB,CAA3C;;AACA,YAAIoD,gBAAgB,GAAGC,oBAAoB,GAAG,GAA1C,IAAiDA,oBAAoB,GAAGpE,YAAY,GAAG,CAA3F,EAA8F;AAC1FiE,UAAAA,2BAA2B,GAAG,CAACA,2BAA2B,GAAIE,gBAAgB,IAAIC,oBAAoB,GAAG,GAA3B,CAA/C,GAAmFA,oBAAoB,GAAGpE,YAA3G,IAA4H,GAA1J;AACH;;AACD,eAAQ,OAAMgE,GAAG,CAACI,oBAAD,EAAuBH,2BAAvB,EAAoD,GAApD,EAAyDG,oBAAoB,GAAG,CAAhF,EAAmF,GAAnF,CAAwF,cAAzG;AACH;;AAED,eAASJ,GAAT,CAAazF,KAAb,EAAoB8F,MAApB,EAA4BC,KAA5B,EAAmCC,MAAnC,EAA2CC,KAA3C,EAAkD;AAC9C,eAAOD,MAAM,GAAG,CAACC,KAAK,GAAGD,MAAT,KAAoB,CAAChG,KAAK,GAAG8F,MAAT,KAAoBC,KAAK,GAAGD,MAA5B,CAApB,CAAhB;AACH;;AAEDjE,MAAAA,iBAAiB;AACpB;AACJ,GAvKQ,EAuKN,CAAC9C,QAAD,EAAWkC,YAAX,EAAyBE,SAAzB,CAvKM,CAAT,CA/B4B,CAwM5B;;AACA,WAAS+E,SAAT,GAAqB;AACjB,QAAIjH,YAAJ,EAAkB;AACdA,MAAAA,YAAY,CAACkH,KAAb;AACAlH,MAAAA,YAAY,CAACY,WAAb,GAA2B,CAA3B;AACH;;AACDb,IAAAA,WAAW,CAAC,KAAKoC,MAAM,CAACgF,YAAP,IAAuBhF,MAAM,CAACiF,kBAAnC,GAAD,CAAX;AACAnH,IAAAA,eAAe,CAAC,IAAIoH,KAAJ,EAAD,CAAf;AACH;;AAED,WAASC,cAAT,GAA0B;AACtB,QAAGtH,YAAY,IAAIO,WAAW,CAACI,OAA/B,EAAwC;AACpC,UAAIG,aAAa,GAAGP,WAAW,CAACI,OAAZ,CAAoBI,KAAxC;AACA,UAAIH,WAAW,GAAIE,aAAa,GAAG,GAAjB,GAAwBd,YAAY,CAACa,QAAvD;AACAb,MAAAA,YAAY,CAACY,WAAb,GAA2BA,WAA3B;AACH;AACJ;;AAED,WAAS2G,SAAT,GAAqB;AACjB,QAAIvH,YAAJ,EAAkB;AACdA,MAAAA,YAAY,CAACkH,KAAb;AACAlH,MAAAA,YAAY,CAACY,WAAb,GAA2B,CAA3B;AACAH,MAAAA,OAAO,CAAC,KAAD,CAAP;AACH;AACJ;;AAED,WAAS+G,UAAT,GAAsB;AAClB,QAAIxH,YAAJ,EAAkB;AACd,UAAIA,YAAY,CAACyH,MAAjB,EAAyB;AACrBzH,QAAAA,YAAY,CAACQ,IAAb;AACAC,QAAAA,OAAO,CAAC,IAAD,CAAP;AACH,OAHD,MAGO;AACHT,QAAAA,YAAY,CAACkH,KAAb;AACAzG,QAAAA,OAAO,CAAC,KAAD,CAAP;AACH;AACJ;AACJ;;AAED,sBACI;AAAK,IAAA,KAAK,EAAEZ,KAAK,CAAC6H,KAAlB;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,GAAG,EAAEtH,YAAxB;AAAsC,MAAA,QAAQ,EAAE6G;AAAhD;AAAA;AAAA;AAAA;AAAA,YAHJ,EAIK/G,MAAM,gBACP;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACI;AAAQ,QAAA,OAAO,EAAEsH,UAAjB;AAAA,kBAA8BhH,IAAI,GAAG,OAAH,GAAa;AAA/C;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,OAAO,EAAE+G,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAO,QAAA,GAAG,EAAEhH,WAAZ;AAAyB,QAAA,IAAI,EAAC,OAA9B;AAAsC,QAAA,GAAG,EAAC,GAA1C;AAA8C,QAAA,GAAG,EAAC,KAAlD;AAAwD,QAAA,YAAY,EAAE,CAAtE;AAAyE,QAAA,EAAE,EAAC,WAA5E;AAAwF,QAAA,QAAQ,EAAE,CAACL,MAAnG;AAA2G,QAAA,QAAQ,EAAEoH,cAAc;AAAnI;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADO,gBAOP,qCAXJ,eAaI;AAAA;AAAA;AAAA;AAAA,YAbJ,eAcI;AAAQ,MAAA,GAAG,EAAEjH,YAAb;AAA2B,MAAA,EAAE,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA,YAdJ,eAeI;AAAQ,MAAA,GAAG,EAAEC,aAAb;AAA4B,MAAA,EAAE,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,YAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH;;GAjQQV,e;;KAAAA,e;AAmQT,eAAeA,eAAf","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\n\nfunction AudioVisualizer(props) {\n    const [audioCtx, setAudioCtx] = useState(null);\n    const [audioElement, setAudioElement] = useState(null);\n    const [loaded, setLoaded] = useState(false);\n    const fileInputRef = useRef(null);\n    const frequencyRef = useRef(null);\n    const backgroundRef = useRef(null);\n    const scrubBarRef = useRef(null);\n    const [play, setPlay] = useState(false);\n\n    useEffect(() => {\n        function updateScrubBar() {\n            if(audioElement && scrubBarRef.current) {\n                let currentTime = audioElement.currentTime;\n                let duration = audioElement.duration;\n                let scrubBarValue = (currentTime/duration)*100;\n                scrubBarRef.current.value = scrubBarValue;\n            }\n        }\n        if (audioElement) {\n          audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n          audioElement.src = URL.createObjectURL(fileInputRef.current.files[0]);\n          audioElement.addEventListener(\"loadeddata\", () => {\n            setLoaded(true);\n          });\n          audioElement.addEventListener(\"ended\", () => {\n            setPlay(false);\n          });\n        }\n    }, [audioElement, audioCtx]);\n\n    useEffect(() => {\n        if (audioCtx) {\n            const source = audioCtx.createMediaElementSource(audioElement);\n            const analyser = audioCtx.createAnalyser();\n            source.connect(analyser);\n            analyser.connect(audioCtx.destination);\n            const bufferLength = analyser.frequencyBinCount;\n            let dataArray = new Uint8Array(bufferLength);\n\n\n            frequencyRef.current.willReadFrequently = true;\n            backgroundRef.current.willReadFrequently = true;\n            const frequencyCtx = frequencyRef.current.getContext(\"2d\");\n            const smudgeCtx = backgroundRef.current.getContext(\"2d\");\n\n            window.addEventListener(\"resize\", () => {\n                backgroundRef.current.width = window.innerWidth;\n                backgroundRef.current.height = window.innerHeight;\n                frequencyRef.current.width = window.innerWidth;\n                frequencyRef.current.height = window.innerHeight;\n            });\n\n            let ultimatePeak = 1;\n            let rotationAngle = 0;\n            let rotateSmudge = false;\n            let smudgeVelocity = 0;\n            // Draw the frequency spectrum visualization\n            function drawVisualization() {\n                requestAnimationFrame(drawVisualization);\n                analyser.getByteFrequencyData(dataArray);\n                \n                // draw current frame to main canvas\n                frequencyCtx.clearRect(0, 0, frequencyCtx.canvas.width, frequencyCtx.canvasheight);\n        \n                let avgAmplitude = 0;\n                let highFreqAvgAmplitude = 0;\n                let midFreqAvgAmplitude = 0;\n                let lowFreqAvgAmplitude = 0;\n                let lowFreqPeakAmplitude = 0;\n                if (dataArray && dataArray.length > 0) {\n                    let gradient = frequencyCtx.createLinearGradient(0, 0, frequencyCtx.canvas.width, 0);\n                    let highFrequencyColor = getHighFrequencyColor(dataArray);\n                    gradient.addColorStop(0, highFrequencyColor);\n                    gradient.addColorStop(0.5, getLowFrequencyColor(dataArray));\n                    gradient.addColorStop(1, highFrequencyColor);\n                    frequencyCtx.fillStyle = gradient;\n                    let verticalCenter = frequencyCtx.height / 2;\n                    let barWidth = (600 / bufferLength) * 2.5 / 2;\n                    let x = 0;\n                    for (let i = bufferLength - 1; i > 0 ; i--) {\n                        drawVisualizationBar(i, barWidth, x, verticalCenter);\n                        x += (barWidth + 1) / 2;\n                    }\n                    for (let i = 0; i < bufferLength; i++) {\n                        drawVisualizationBar(i, barWidth, x, verticalCenter);\n                        x += (barWidth + 1) / 2;\n                    }\n                    avgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length);\n                    highFreqAvgAmplitude = getAverageAmplitude(dataArray, 12 * dataArray.length / 16, dataArray.length);\n                    midFreqAvgAmplitude = getAverageAmplitude(dataArray, dataArray.length / 16, 3 * dataArray.length / 16);\n                    lowFreqAvgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length / 16);\n                    lowFreqPeakAmplitude = getPeakAmplitude(dataArray, 0, dataArray.length / 16);\n                    frequencyCtx.globalAlpha = Math.abs(0.2 - (avgAmplitude / 100)) + 0.1;\n                }\n                \n                //smudge effect\n                rotateSmudge = (rotateSmudge && !(lowFreqPeakAmplitude > ultimatePeak * 1.01) && midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 1.8) || midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 3.2;\n                if (rotateSmudge) {\n                    rotationAngle = (rotationAngle + 1) % 360;\n                    smudgeVelocity = (lowFreqAvgAmplitude) / 60 * (midFreqAvgAmplitude < highFreqAvgAmplitude)? -1: 1;\n                    // Save the current canvas state\n                    smudgeCtx.save();\n                    // Rotate the canvas\n                    smudgeCtx.translate(smudgeCtx.canvas.width / 2, smudgeCtx.canvas.height / 2);\n                    smudgeCtx.rotate(Math.PI / 180 * rotationAngle * smudgeVelocity);\n                    smudgeCtx.translate(-smudgeCtx.canvas.width / 2, -smudgeCtx.canvas.height / 2);\n                    // Draw the smudged image on the canvas\n                    smudgeCtx.globalAlpha = Math.abs(0.5 - (avgAmplitude / 100)) / 10;\n                    smudgeCtx.drawImage(smudgeCtx.canvas, 0, 0);\n                    // Restore the canvas state\n                    smudgeCtx.restore();\n                } else {\n                    rotationAngle = 0;\n                    var imageDataTop = smudgeCtx.getImageData(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height / 2);\n                    var imageDataBottom = smudgeCtx.getImageData(0, smudgeCtx.canvas.height / 2, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n                    smudgeCtx.clearRect(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n                    smudgeCtx.globalAlpha = 0.5 - (avgAmplitude / 100);\n                    smudgeVelocity = (avgAmplitude < 10)? avgAmplitude * 2: ((lowFreqPeakAmplitude >= ultimatePeak && lowFreqAvgAmplitude * 0.6 > midFreqAvgAmplitude + highFreqAvgAmplitude)? -1: 1) * avgAmplitude / 4;\n                    smudgeCtx.putImageData(imageDataTop, 0, -smudgeVelocity);\n                    smudgeCtx.putImageData(imageDataBottom, 0, smudgeCtx.canvas.height / 2 + smudgeVelocity);\n                }\n                smudgeCtx.drawImage(frequencyCtx.canvas, 0, 0);\n            }\n        \n            function getAverageAmplitude(data, startIndex, endIndex) {\n                startIndex = Math.trunc(startIndex);\n                endIndex = Math.min(Math.trunc(endIndex), data.length);\n                let sum = 0;\n                for (let i = startIndex; i < endIndex; i++) {\n                    sum += data[i];\n                }\n                return sum / (endIndex - startIndex - 1);\n            }\n        \n            function getPeakAmplitude(data, startIndex, endIndex) {\n                startIndex = Math.trunc(startIndex);\n                endIndex = Math.min(Math.trunc(endIndex), data.length);\n                let peak = 0;\n                for (let i = startIndex; i < endIndex; i++) {\n                    peak = Math.max(peak, data[i]);\n                }\n                return peak;\n            }\n        \n            function drawVisualizationBar(index, barWidth, x, verticalCenter) {\n                if (dataArray[index] > ultimatePeak) {\n                    ultimatePeak = dataArray[index];\n                }\n                //take the square of the data like this will amplify peaks\n                const adjustedData = 8 * dataArray[index] * Math.pow(dataArray[index] / ultimatePeak, 1.5 * (1 - (index / dataArray.length))) * ((index + (dataArray.length / 2)) / dataArray.length);\n                let barHeight = adjustedData;\n                let offsetX = (Math.random() - 0.5) * adjustedData / 32;\n                let offsetY = (Math.random() - 0.5) * adjustedData / 32;\n                let offsetWidth = (Math.random() - 0.5) * adjustedData / 32;\n                frequencyCtx.fillRect(x + offsetX, verticalCenter - (barHeight / 4) + offsetY, barWidth + offsetWidth, barHeight / 2);\n            }\n        \n            let lowFreqShiftingColorNumber = 0;\n            function getLowFrequencyColor(dataArray) {\n                let lowFrequencySum = 0;\n                let lowFrequencyMax = 0;\n                for (let i = 0; i < dataArray.length / 2; i++) {\n                    lowFrequencySum += dataArray[i];\n                    if (dataArray[i] > lowFrequencyMax) {\n                        lowFrequencyMax = dataArray[i];\n                    }\n                }\n                let lowFrequencyAverage = lowFrequencySum / (dataArray.length / 2);\n                if (lowFrequencyMax > lowFrequencyAverage * 10 || lowFrequencyAverage > ultimatePeak / 2) {\n                    lowFreqShiftingColorNumber = (lowFreqShiftingColorNumber + (lowFrequencyMax / (lowFrequencyAverage * 20)) + (lowFrequencyAverage / ultimatePeak)) % 255;\n                }\n                return `hsl(${map(lowFrequencyAverage, lowFreqShiftingColorNumber, 255, lowFreqShiftingColorNumber / 4, 360)}, 100%, 50%)`;\n            }\n        \n            let highFreqShiftingColorNumber = 0;\n            function getHighFrequencyColor(dataArray) {\n                let highFrequencySum = 0;\n                let highFrequencyMax = 0;\n                for (let i = dataArray.length / 2; i < dataArray.length; i++) {\n                    highFrequencySum += dataArray[i];\n                    if (dataArray[i] > highFrequencyMax) {\n                        highFrequencyMax = dataArray[i];\n                    }\n                }\n                let highFrequencyAverage = highFrequencySum / (dataArray.length/ 2);\n                if (highFrequencyMax > highFrequencyAverage * 200 || highFrequencyAverage > ultimatePeak / 2) {\n                    highFreqShiftingColorNumber = (highFreqShiftingColorNumber + (highFrequencyMax / (highFrequencyAverage * 200)) + (highFrequencyAverage / ultimatePeak)) % 255;\n                }\n                return `hsl(${map(highFrequencyAverage, highFreqShiftingColorNumber, 255, highFrequencyAverage / 4, 360)}, 100%, 50%)`;\n            }\n        \n            function map(value, start1, stop1, start2, stop2) {\n                return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n            }\n\n            drawVisualization();\n        }\n    }, [audioCtx, frequencyCtx, smudgeCtx]);\n\n    // Initialize audio context and elements when the file input changes\n    function loadAudio() {\n        if (audioElement) {\n            audioElement.pause();\n            audioElement.currentTime = 0;\n        }\n        setAudioCtx(new (window.AudioContext || window.webkitAudioContext)());\n        setAudioElement(new Audio());\n    }\n\n    function updatePlayback() {\n        if(audioElement && scrubBarRef.current) {\n            let scrubBarValue = scrubBarRef.current.value;\n            let currentTime = (scrubBarValue / 100) * audioElement.duration;\n            audioElement.currentTime = currentTime;\n        }\n    }\n\n    function stopAudio() {\n        if (audioElement) {\n            audioElement.pause();\n            audioElement.currentTime = 0;\n            setPlay(false);\n        }\n    }\n\n    function togglePlay() {\n        if (audioElement) {\n            if (audioElement.paused) {\n                audioElement.play();\n                setPlay(true);\n            } else {\n                audioElement.pause();\n                setPlay(false);\n            }\n        }\n    }\n\n    return (\n        <div style={props.style}>\n            <br />\n            <br />\n            <input type=\"file\" ref={fileInputRef} onChange={loadAudio} />\n            {loaded?\n            <div className=\"control-panel\">\n                <button onClick={togglePlay}>{play ? 'Pause' : 'Play'}</button>\n                <button onClick={stopAudio}>Stop</button>\n                <input ref={scrubBarRef} type=\"range\" min=\"0\" max=\"100\" defaultValue={0} id=\"scrub-bar\" disabled={!loaded} onChange={updatePlayback()}/>\n            </div>\n            :\n            <></>\n            }\n            <br />\n            <canvas ref={frequencyRef} id=\"frequency\" />\n            <canvas ref={backgroundRef} id=\"background\" />\n        </div>\n    );\n}\n\nexport default AudioVisualizer;\n"]},"metadata":{},"sourceType":"module"}