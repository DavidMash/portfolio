{"ast":null,"code":"var _jsxFileName = \"/Users/davidmash/Documents/website/src/Components/AudioVisualizer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction AudioVisualizer(props) {\n  _s();\n\n  const [audioCtx, setAudioCtx] = useState(null);\n  const [audioElement, setAudioElement] = useState(null);\n  const [source, setSource] = useState(null);\n  const [analyser, setAnalyser] = useState(null);\n  const [bufferLength, setBufferLength] = useState(null);\n  const [dataArray, setDataArray] = useState(null);\n  const [loaded, setLoaded] = useState(false);\n  const [ultimate, setUltimatePeak] = useState(1);\n  const fileInputRef = useRef(null);\n  const frequencyRef = useRef(null);\n  const frequencyCtx = useRef(null);\n  const smudgeCtx = useRef(null);\n  const backgroundRef = useRef(null);\n  const scrubBarRef = useRef(null);\n  const [play, setPlay] = useState(false);\n  useEffect(() => {\n    if (audioElement) {\n      audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n      audioElement.src = URL.createObjectURL(fileInputRef.current.files[0]);\n      audioElement.addEventListener(\"loadeddata\", () => {\n        setLoaded(true);\n        scrubBarRef.value = 0;\n      });\n      audioElement.addEventListener(\"ended\", () => {\n        setPlay(false);\n      });\n      setSource(audioCtx.createMediaElementSource(audioElement));\n    }\n  }, [audioElement]);\n  useEffect(() => {\n    if (source) {\n      setAnalyser(audioCtx.createAnalyser());\n    }\n  }, [source]);\n  useEffect(() => {\n    if (analyser && source) {\n      source.connect(analyser);\n      analyser.connect(audioCtx.destination);\n      setBufferLength(analyser.frequencyBinCount);\n      setDataArray(new Uint8Array(bufferLength));\n      setUltimatePeak(1);\n      drawVisualization();\n    }\n  }, [analyser]); // Initialize audio context and elements when the file input changes\n\n  function loadAudio() {\n    if (audioElement) {\n      audioElement.pause();\n      audioElement.currentTime = 0;\n    }\n\n    setAudioCtx(new (window.AudioContext || window.webkitAudioContext)());\n    setAudioElement(new Audio());\n  }\n\n  function updateScrubBar() {\n    if (audioElement) {\n      let currentTime = audioElement.currentTime;\n      let duration = audioElement.duration;\n      let scrubBarValue = currentTime / duration * 100;\n      scrubBarRef.value = scrubBarValue;\n    }\n  }\n\n  function updatePlayback() {\n    if (audioElement) {\n      let scrubBarValue = scrubBarRef.value;\n      let currentTime = scrubBarValue / 100 * audioElement.duration;\n      audioElement.currentTime = currentTime;\n    }\n  }\n\n  useEffect(() => {\n    //update sizes\n    backgroundRef.current.width = window.innerWidth;\n    backgroundRef.current.height = window.innerHeight;\n    frequencyRef.current.width = window.innerWidth;\n    frequencyRef.current.height = window.innerHeight;\n    setFrequencyCtx(frequencyRef.getContext(\"2d\"));\n    setSmudgeCtx(backgroundRef.getContext(\"2d\"));\n    window.addEventListener(\"resize\", () => {\n      backgroundRef.current.width = window.innerWidth;\n      backgroundRef.current.height = window.innerHeight;\n      frequencyRef.current.width = window.innerWidth;\n      frequencyRef.current.height = window.innerHeight;\n    });\n  }, []);\n  let rotationAngle = 0;\n  let rotateSmudge = false; // Draw the frequency spectrum visualization\n\n  function drawVisualization() {\n    requestAnimationFrame(drawVisualization);\n    analyser.getByteFrequencyData(dataArray); // draw current frame to main canvas\n\n    frequencyVisual.clearRect(0, 0, canvas.width, canvas.height);\n    let gradient = frequencyRef.createLinearGradient(0, 0, canvas.width, 0);\n    let highFrequencyColor = getHighFrequencyColor(dataArray);\n    gradient.addColorStop(0, highFrequencyColor);\n    gradient.addColorStop(0.5, getLowFrequencyColor(dataArray));\n    gradient.addColorStop(1, highFrequencyColor);\n    frequencyRef.fillStyle = gradient;\n    let verticalCenter = canvas.height / 2;\n    let barWidth = 600 / bufferLength * 2.5 / 2;\n    let x = 0;\n\n    for (let i = bufferLength - 1; i > 0; i--) {\n      drawVisualizationBar(i, barWidth, x, verticalCenter);\n      x += (barWidth + 1) / 2;\n    }\n\n    for (let i = 0; i < bufferLength; i++) {\n      drawVisualizationBar(i, barWidth, x, verticalCenter);\n      x += (barWidth + 1) / 2;\n    }\n\n    let avgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length);\n    let highFreqAvgAmplitude = getAverageAmplitude(dataArray, 12 * dataArray.length / 16, dataArray.length);\n    let midFreqAvgAmplitude = getAverageAmplitude(dataArray, dataArray.length / 16, 3 * dataArray.length / 16);\n    let lowFreqAvgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length / 16);\n    let lowFreqPeakAmplitude = getPeakAmplitude(dataArray, 0, dataArray.length / 16);\n    frequencyRef.globalAlpha = Math.abs(0.2 - avgAmplitude / 100) + 0.1; //smudge effect\n\n    rotateSmudge = rotateSmudge && !(lowFreqPeakAmplitude > ultimatePeak * 1.01) && midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 1.8 || midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 3.2;\n\n    if (rotateSmudge) {\n      rotationAngle = (rotationAngle + 1) % 360;\n      smudgeVelocity = lowFreqAvgAmplitude / 60 * (midFreqAvgAmplitude < highFreqAvgAmplitude) ? -1 : 1; // Save the current canvas state\n\n      smudgeCtx.save(); // Rotate the canvas\n\n      smudgeCtx.translate(backgroundRef.width / 2, backgroundRef.height / 2);\n      smudgeCtx.rotate(Math.PI / 180 * rotationAngle * smudgeVelocity);\n      smudgeCtx.translate(-backgroundRef.width / 2, -backgroundRef.height / 2); // Draw the smudged image on the canvas\n\n      smudgeCtx.globalAlpha = Math.abs(0.5 - avgAmplitude / 100) / 10;\n      smudgeCtx.drawImage(backgroundRef, 0, 0); // Restore the canvas state\n\n      smudgeCtx.restore();\n    } else {\n      rotationAngle = 0;\n      var imageDataTop = smudgeCtx.getImageData(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height / 2);\n      var imageDataBottom = smudgeCtx.getImageData(0, smudgeCtx.canvas.height / 2, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n      smudgeCtx.clearRect(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n      smudgeCtx.globalAlpha = 0.5 - avgAmplitude / 100;\n      smudgeVelocity = avgAmplitude < 10 ? avgAmplitude * 2 : (lowFreqPeakAmplitude >= ultimatePeak && lowFreqAvgAmplitude * 0.6 > midFreqAvgAmplitude + highFreqAvgAmplitude ? -1 : 1) * avgAmplitude / 4;\n      smudgeCtx.putImageData(imageDataTop, 0, -smudgeVelocity);\n      smudgeCtx.putImageData(imageDataBottom, 0, smudgeCtx.canvas.height / 2 + smudgeVelocity);\n    }\n\n    smudgeCtx.drawImage(canvas, 0, 0);\n  }\n\n  function getAverageAmplitude(data, startIndex, endIndex) {\n    startIndex = Math.trunc(startIndex);\n    endIndex = Math.min(Math.trunc(endIndex), data.length);\n    let sum = 0;\n\n    for (let i = startIndex; i < endIndex; i++) {\n      sum += data[i];\n    }\n\n    return sum / (endIndex - startIndex - 1);\n  }\n\n  function getPeakAmplitude(data, startIndex, endIndex) {\n    startIndex = Math.trunc(startIndex);\n    endIndex = Math.min(Math.trunc(endIndex), data.length);\n    let peak = 0;\n\n    for (let i = startIndex; i < endIndex; i++) {\n      peak = Math.max(peak, data[i]);\n    }\n\n    return peak;\n  }\n\n  function drawVisualizationBar(index, barWidth, x, verticalCenter) {\n    if (dataArray[index] > ultimatePeak) {\n      ultimatePeak = dataArray[index];\n    } //take the square of the data like this will amplify peaks\n\n\n    const adjustedData = 8 * dataArray[index] * Math.pow(dataArray[index] / ultimatePeak, 1.5 * (1 - index / dataArray.length)) * ((index + dataArray.length / 2) / dataArray.length);\n    let barHeight = adjustedData;\n    let offsetX = (Math.random() - 0.5) * adjustedData / 32;\n    let offsetY = (Math.random() - 0.5) * adjustedData / 32;\n    let offsetWidth = (Math.random() - 0.5) * adjustedData / 32;\n    frequency.fillRect(x + offsetX, verticalCenter - barHeight / 4 + offsetY, barWidth + offsetWidth, barHeight / 2);\n  }\n\n  let lowFreqShiftingColorNumber = 0;\n\n  function getLowFrequencyColor(dataArray) {\n    let lowFrequencySum = 0;\n    let lowFrequencyMax = 0;\n\n    for (let i = 0; i < bufferLength / 2; i++) {\n      lowFrequencySum += dataArray[i];\n\n      if (dataArray[i] > lowFrequencyMax) {\n        lowFrequencyMax = dataArray[i];\n      }\n    }\n\n    let lowFrequencyAverage = lowFrequencySum / (bufferLength / 2);\n\n    if (lowFrequencyMax > lowFrequencyAverage * 10 || lowFrequencyAverage > ultimatePeak / 2) {\n      lowFreqShiftingColorNumber = (lowFreqShiftingColorNumber + lowFrequencyMax / (lowFrequencyAverage * 20) + lowFrequencyAverage / ultimatePeak) % 255;\n    }\n\n    return `hsl(${map(lowFrequencyAverage, lowFreqShiftingColorNumber, 255, lowFreqShiftingColorNumber / 4, 360)}, 100%, 50%)`;\n  }\n\n  let highFreqShiftingColorNumber = 0;\n\n  function getHighFrequencyColor(dataArray) {\n    let highFrequencySum = 0;\n    let highFrequencyMax = 0;\n\n    for (let i = bufferLength / 2; i < bufferLength; i++) {\n      highFrequencySum += dataArray[i];\n\n      if (dataArray[i] > highFrequencyMax) {\n        highFrequencyMax = dataArray[i];\n      }\n    }\n\n    let highFrequencyAverage = highFrequencySum / (bufferLength / 2);\n\n    if (highFrequencyMax > highFrequencyAverage * 200 || highFrequencyAverage > ultimatePeak / 2) {\n      highFreqShiftingColorNumber = (highFreqShiftingColorNumber + highFrequencyMax / (highFrequencyAverage * 200) + highFrequencyAverage / ultimatePeak) % 255;\n    }\n\n    return `hsl(${map(highFrequencyAverage, highFreqShiftingColorNumber, 255, highFrequencyAverage / 4, 360)}, 100%, 50%)`;\n  }\n\n  function map(value, start1, stop1, start2, stop2) {\n    return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n  }\n\n  function stopAudio() {\n    if (audioElement) {\n      audioElement.pause();\n      audioElement.currentTime = 0;\n      setPlay(false);\n    }\n  }\n\n  function togglePlay() {\n    if (audioElement) {\n      if (audioElement.paused) {\n        audioElement.play();\n        setPlay(true);\n      } else {\n        audioElement.pause();\n        setPlay(false);\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: props.style,\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      ref: fileInputRef,\n      onChange: loadAudio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }, this), loaded ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: togglePlay,\n        children: play ? 'Pause' : 'Play'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: stopAudio,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: scrubBarRef,\n        type: \"range\",\n        min: \"0\",\n        max: \"100\",\n        value: loaded ? 0 : 100,\n        id: \"scrub-bar\",\n        disabled: !loaded\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: frequencyRef,\n      id: \"frequency\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: backgroundRef,\n      id: \"background\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AudioVisualizer, \"fD2m2HuSs9BUN5PKv56XGpjESQQ=\");\n\n_c = AudioVisualizer;\nexport default AudioVisualizer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioVisualizer\");","map":{"version":3,"sources":["/Users/davidmash/Documents/website/src/Components/AudioVisualizer.js"],"names":["React","useRef","useState","useEffect","AudioVisualizer","props","audioCtx","setAudioCtx","audioElement","setAudioElement","source","setSource","analyser","setAnalyser","bufferLength","setBufferLength","dataArray","setDataArray","loaded","setLoaded","ultimate","setUltimatePeak","fileInputRef","frequencyRef","frequencyCtx","smudgeCtx","backgroundRef","scrubBarRef","play","setPlay","addEventListener","updateScrubBar","src","URL","createObjectURL","current","files","value","createMediaElementSource","createAnalyser","connect","destination","frequencyBinCount","Uint8Array","drawVisualization","loadAudio","pause","currentTime","window","AudioContext","webkitAudioContext","Audio","duration","scrubBarValue","updatePlayback","width","innerWidth","height","innerHeight","setFrequencyCtx","getContext","setSmudgeCtx","rotationAngle","rotateSmudge","requestAnimationFrame","getByteFrequencyData","frequencyVisual","clearRect","canvas","gradient","createLinearGradient","highFrequencyColor","getHighFrequencyColor","addColorStop","getLowFrequencyColor","fillStyle","verticalCenter","barWidth","x","i","drawVisualizationBar","avgAmplitude","getAverageAmplitude","length","highFreqAvgAmplitude","midFreqAvgAmplitude","lowFreqAvgAmplitude","lowFreqPeakAmplitude","getPeakAmplitude","globalAlpha","Math","abs","ultimatePeak","smudgeVelocity","save","translate","rotate","PI","drawImage","restore","imageDataTop","getImageData","imageDataBottom","putImageData","data","startIndex","endIndex","trunc","min","sum","peak","max","index","adjustedData","pow","barHeight","offsetX","random","offsetY","offsetWidth","frequency","fillRect","lowFreqShiftingColorNumber","lowFrequencySum","lowFrequencyMax","lowFrequencyAverage","map","highFreqShiftingColorNumber","highFrequencySum","highFrequencyMax","highFrequencyAverage","start1","stop1","start2","stop2","stopAudio","togglePlay","paused","style"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\n\nfunction AudioVisualizer(props) {\n    const [audioCtx, setAudioCtx] = useState(null);\n    const [audioElement, setAudioElement] = useState(null);\n    const [source, setSource] = useState(null);\n    const [analyser, setAnalyser] = useState(null);\n    const [bufferLength, setBufferLength] = useState(null);\n    const [dataArray, setDataArray] = useState(null);\n    const [loaded, setLoaded] = useState(false);\n    const [ultimate, setUltimatePeak] = useState(1);\n    const fileInputRef = useRef(null);\n    const frequencyRef = useRef(null);\n    const frequencyCtx = useRef(null);\n    const smudgeCtx = useRef(null);\n    const backgroundRef = useRef(null);\n    const scrubBarRef = useRef(null);\n    const [play, setPlay] = useState(false);\n\n    useEffect(() => {\n        if (audioElement) {\n          audioElement.addEventListener(\"timeupdate\", updateScrubBar);\n          audioElement.src = URL.createObjectURL(fileInputRef.current.files[0]);\n          audioElement.addEventListener(\"loadeddata\", () => {\n            setLoaded(true);\n            scrubBarRef.value = 0;\n          });\n          audioElement.addEventListener(\"ended\", () => {\n            setPlay(false);\n          });\n          setSource(audioCtx.createMediaElementSource(audioElement));\n        }\n    }, [audioElement]);\n\n    useEffect(() => {\n        if (source) {\n            setAnalyser(audioCtx.createAnalyser());\n        }\n    }, [source]);\n\n    useEffect(() => {\n        if (analyser && source) {\n            source.connect(analyser);\n            analyser.connect(audioCtx.destination);\n            setBufferLength(analyser.frequencyBinCount);\n            setDataArray(new Uint8Array(bufferLength));\n            setUltimatePeak(1);\n            drawVisualization();\n        }\n    }, [analyser]);\n\n    // Initialize audio context and elements when the file input changes\n    function loadAudio() {\n        if (audioElement) {\n            audioElement.pause();\n            audioElement.currentTime = 0;\n        }\n        setAudioCtx(new (window.AudioContext || window.webkitAudioContext)());\n        setAudioElement(new Audio());\n    }\n\n    function updateScrubBar(){\n        if(audioElement) {\n            let currentTime = audioElement.currentTime;\n            let duration = audioElement.duration;\n            let scrubBarValue = (currentTime/duration)*100;\n            scrubBarRef.value = scrubBarValue;\n        }\n    }\n\n    function updatePlayback() {\n        if(audioElement) {\n            let scrubBarValue = scrubBarRef.value;\n            let currentTime = (scrubBarValue / 100) * audioElement.duration;\n            audioElement.currentTime = currentTime;\n        }\n    }\n\n    useEffect(() => {\n        //update sizes\n        backgroundRef.current.width = window.innerWidth;\n        backgroundRef.current.height = window.innerHeight;\n        frequencyRef.current.width = window.innerWidth;\n        frequencyRef.current.height = window.innerHeight;\n\n        setFrequencyCtx(frequencyRef.getContext(\"2d\"));\n        setSmudgeCtx(backgroundRef.getContext(\"2d\"));\n\n        window.addEventListener(\"resize\", () => {\n            backgroundRef.current.width = window.innerWidth;\n            backgroundRef.current.height = window.innerHeight;\n            frequencyRef.current.width = window.innerWidth;\n            frequencyRef.current.height = window.innerHeight;\n        });\n    }, []);\n\n    let rotationAngle = 0;\n    let rotateSmudge = false;\n    // Draw the frequency spectrum visualization\n    function drawVisualization() {\n        requestAnimationFrame(drawVisualization);\n        analyser.getByteFrequencyData(dataArray);\n        \n        // draw current frame to main canvas\n        frequencyVisual.clearRect(0, 0, canvas.width, canvas.height);\n        let gradient = frequencyRef.createLinearGradient(0, 0, canvas.width, 0);\n        let highFrequencyColor = getHighFrequencyColor(dataArray);\n        gradient.addColorStop(0, highFrequencyColor);\n        gradient.addColorStop(0.5, getLowFrequencyColor(dataArray));\n        gradient.addColorStop(1, highFrequencyColor);\n        frequencyRef.fillStyle = gradient;\n        let verticalCenter = canvas.height / 2;\n        let barWidth = (600 / bufferLength) * 2.5 / 2;\n        let x = 0;\n        for (let i = bufferLength - 1; i > 0 ; i--) {\n            drawVisualizationBar(i, barWidth, x, verticalCenter);\n            x += (barWidth + 1) / 2;\n        }\n        for (let i = 0; i < bufferLength; i++) {\n            drawVisualizationBar(i, barWidth, x, verticalCenter);\n            x += (barWidth + 1) / 2;\n        }\n        let avgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length);\n        let highFreqAvgAmplitude = getAverageAmplitude(dataArray, 12 * dataArray.length / 16, dataArray.length);\n        let midFreqAvgAmplitude = getAverageAmplitude(dataArray, dataArray.length / 16, 3 * dataArray.length / 16);\n        let lowFreqAvgAmplitude = getAverageAmplitude(dataArray, 0, dataArray.length / 16);\n        let lowFreqPeakAmplitude = getPeakAmplitude(dataArray, 0, dataArray.length / 16);\n        frequencyRef.globalAlpha = Math.abs(0.2 - (avgAmplitude / 100)) + 0.1;\n        \n        //smudge effect\n        rotateSmudge = (rotateSmudge && !(lowFreqPeakAmplitude > ultimatePeak * 1.01) && midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 1.8) || midFreqAvgAmplitude + highFreqAvgAmplitude > avgAmplitude * 3.2;\n        if (rotateSmudge) {\n            rotationAngle = (rotationAngle + 1) % 360;\n            smudgeVelocity = (lowFreqAvgAmplitude) / 60 * (midFreqAvgAmplitude < highFreqAvgAmplitude)? -1: 1;\n            // Save the current canvas state\n            smudgeCtx.save();\n            // Rotate the canvas\n            smudgeCtx.translate(backgroundRef.width / 2, backgroundRef.height / 2);\n            smudgeCtx.rotate(Math.PI / 180 * rotationAngle * smudgeVelocity);\n            smudgeCtx.translate(-backgroundRef.width / 2, -backgroundRef.height / 2);\n            // Draw the smudged image on the canvas\n            smudgeCtx.globalAlpha = Math.abs(0.5 - (avgAmplitude / 100)) / 10;\n            smudgeCtx.drawImage(backgroundRef, 0, 0);\n            // Restore the canvas state\n            smudgeCtx.restore();\n        } else {\n            rotationAngle = 0;\n            var imageDataTop = smudgeCtx.getImageData(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height / 2);\n            var imageDataBottom = smudgeCtx.getImageData(0, smudgeCtx.canvas.height / 2, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n            smudgeCtx.clearRect(0, 0, smudgeCtx.canvas.width, smudgeCtx.canvas.height);\n            smudgeCtx.globalAlpha = 0.5 - (avgAmplitude / 100);\n            smudgeVelocity = (avgAmplitude < 10)? avgAmplitude * 2: ((lowFreqPeakAmplitude >= ultimatePeak && lowFreqAvgAmplitude * 0.6 > midFreqAvgAmplitude + highFreqAvgAmplitude)? -1: 1) * avgAmplitude / 4;\n            smudgeCtx.putImageData(imageDataTop, 0, -smudgeVelocity);\n            smudgeCtx.putImageData(imageDataBottom, 0, smudgeCtx.canvas.height / 2 + smudgeVelocity);\n        }\n        smudgeCtx.drawImage(canvas, 0, 0);\n    }\n\n    function getAverageAmplitude(data, startIndex, endIndex) {\n        startIndex = Math.trunc(startIndex);\n        endIndex = Math.min(Math.trunc(endIndex), data.length);\n        let sum = 0;\n        for (let i = startIndex; i < endIndex; i++) {\n            sum += data[i];\n        }\n        return sum / (endIndex - startIndex - 1);\n    }\n\n    function getPeakAmplitude(data, startIndex, endIndex) {\n        startIndex = Math.trunc(startIndex);\n        endIndex = Math.min(Math.trunc(endIndex), data.length);\n        let peak = 0;\n        for (let i = startIndex; i < endIndex; i++) {\n            peak = Math.max(peak, data[i]);\n        }\n        return peak;\n    }\n\n    function drawVisualizationBar(index, barWidth, x, verticalCenter) {\n        if (dataArray[index] > ultimatePeak) {\n            ultimatePeak = dataArray[index];\n        }\n        //take the square of the data like this will amplify peaks\n        const adjustedData = 8 * dataArray[index] * Math.pow(dataArray[index] / ultimatePeak, 1.5 * (1 - (index / dataArray.length))) * ((index + (dataArray.length / 2)) / dataArray.length);\n        let barHeight = adjustedData;\n        let offsetX = (Math.random() - 0.5) * adjustedData / 32;\n        let offsetY = (Math.random() - 0.5) * adjustedData / 32;\n        let offsetWidth = (Math.random() - 0.5) * adjustedData / 32;\n        frequency.fillRect(x + offsetX, verticalCenter - (barHeight / 4) + offsetY, barWidth + offsetWidth, barHeight / 2);\n    }\n\n    let lowFreqShiftingColorNumber = 0;\n    function getLowFrequencyColor(dataArray) {\n        let lowFrequencySum = 0;\n        let lowFrequencyMax = 0;\n        for (let i = 0; i < bufferLength / 2; i++) {\n            lowFrequencySum += dataArray[i];\n            if (dataArray[i] > lowFrequencyMax) {\n            lowFrequencyMax = dataArray[i];\n            }\n        }\n        let lowFrequencyAverage = lowFrequencySum / (bufferLength / 2);\n        if (lowFrequencyMax > lowFrequencyAverage * 10 || lowFrequencyAverage > ultimatePeak / 2) {\n            lowFreqShiftingColorNumber = (lowFreqShiftingColorNumber + (lowFrequencyMax / (lowFrequencyAverage * 20)) + (lowFrequencyAverage / ultimatePeak)) % 255;\n        }\n        return `hsl(${map(lowFrequencyAverage, lowFreqShiftingColorNumber, 255, lowFreqShiftingColorNumber / 4, 360)}, 100%, 50%)`;\n    }\n\n    let highFreqShiftingColorNumber = 0;\n    function getHighFrequencyColor(dataArray) {\n        let highFrequencySum = 0;\n        let highFrequencyMax = 0;\n        for (let i = bufferLength / 2; i < bufferLength; i++) {\n            highFrequencySum += dataArray[i];\n            if (dataArray[i] > highFrequencyMax) {\n            highFrequencyMax = dataArray[i];\n            }\n        }\n        let highFrequencyAverage = highFrequencySum / (bufferLength / 2);\n        if (highFrequencyMax > highFrequencyAverage * 200 || highFrequencyAverage > ultimatePeak / 2) {\n            highFreqShiftingColorNumber = (highFreqShiftingColorNumber + (highFrequencyMax / (highFrequencyAverage * 200)) + (highFrequencyAverage / ultimatePeak)) % 255;\n        }\n        return `hsl(${map(highFrequencyAverage, highFreqShiftingColorNumber, 255, highFrequencyAverage / 4, 360)}, 100%, 50%)`;\n        }\n\n        function map(value, start1, stop1, start2, stop2) {\n        return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n    }\n\n    function stopAudio() {\n        if (audioElement) {\n            audioElement.pause();\n            audioElement.currentTime = 0;\n            setPlay(false);\n        }\n    }\n\n    function togglePlay() {\n        if (audioElement) {\n            if (audioElement.paused) {\n                audioElement.play();\n                setPlay(true);\n            } else {\n                audioElement.pause();\n                setPlay(false);\n            }\n        }\n    }\n\n    return (\n        <div style={props.style}>\n            <br />\n            <br />\n            <input type=\"file\" ref={fileInputRef} onChange={loadAudio} />\n            {loaded?\n            <div className=\"control-panel\">\n                <button onClick={togglePlay}>{play ? 'Pause' : 'Play'}</button>\n                <button onClick={stopAudio}>Stop</button>\n                <input ref={scrubBarRef} type=\"range\" min=\"0\" max=\"100\" value={loaded ? 0 : 100} id=\"scrub-bar\" disabled={!loaded} />\n            </div>\n            :\n            <></>\n            }\n            <br />\n            <canvas ref={frequencyRef} id=\"frequency\" />\n            <canvas ref={backgroundRef} id=\"background\" />\n        </div>\n    );\n}\n\nexport default AudioVisualizer;\n"]},"metadata":{},"sourceType":"module"}